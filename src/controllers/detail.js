// Mock data
const data = [
    {
        id: 1,
        description: [
            { 
                sub: "A01:2021 – Broken Access Contro", 
                img: "" 
            },
            { 
                sub: "Access Control คือการควบคุมการเข้า-ออกรวมไปถึงสิทธิ์การเข้าถึงข้อมูลในระบบ โดยการที่จะให้เข้าถึงข้อมูลใดๆ ในระบบจะต้องผ่านการตรวจสอบดังนี้", 
                img: "" 
            },
            { 
                sub: "●	การละเมิดหลักการของสิทธิ์ต่ำสุด (Principle of Least Privilege) หรือการตั้งค่าให้อนุญาตโดยค่าเริ่มต้น (Deny by Default): ซึ่งสิทธิ์การเข้าถึงควรถูกกำหนดให้เฉพาะสำหรับฟังก์ชัน บทบาท หรือผู้ใช้บางกลุ่มเท่านั้น แต่กลับถูกตั้งค่าให้ใครก็สามารถเข้าถึงได้"
            },
            { 
                sub: "●	การข้ามการตรวจสอบการเข้าถึง: โดยการปรับเปลี่ยน URL (การแก้ไขพารามิเตอร์หรือการ Force Browsing) สถานะภายในของแอปพลิเคชัน หรือหน้า HTML หรือการใช้เครื่องมือโจมตีเพื่อแก้ไขคำขอ API", 
                img: "" 
            },
            { 
                sub: "● การอนุญาตให้ดูหรือแก้ไขบัญชีของผู้อื่น: โดยใช้ตัวระบุเฉพาะของบัญชี (Insecure Direct Object References หรือ IDOR)", 
                img: "" 
            },
            { 
                sub: "● การเข้าถึง API ที่ไม่มีการควบคุมการเข้าถึงสำหรับคำขอ POST, PUT และ DELETE", 
                img: "" 
            },
            { 
                sub: "● การยกระดับสิทธิ์ (Privilege Escalation): เช่น การกระทำในฐานะผู้ใช้โดยไม่ได้เข้าสู่ระบบ หรือการกระทำในฐานะผู้ดูแลระบบ (Admin) ขณะเข้าสู่ระบบเป็นผู้ใช้ทั่วไป", 
                img: "" 
            },
            { 
                sub: "● การแก้ไขข้อมูลเมตา (Metadata Manipulation): เช่น การเล่นซ้ำหรือแก้ไขโทเค็นการควบคุมการเข้าถึง (JWT) คุกกี้ หรือฟิลด์ที่ซ่อนอยู่เพื่อยกระดับสิทธิ์ หรือการละเมิด JWT ที่หมดอายุ", 
                img: "" 
            },
            { 
                sub: "● การตั้งค่า CORS ผิดพลาด: ที่อนุญาตให้เข้าถึง API จากแหล่งที่มา (Origin) ที่ไม่ได้รับอนุญาตหรือไม่น่าเชื่อถือ", 
                img: "" 
            },
            { 
                sub: "● การ Force Browsing: เพื่อเข้าถึงหน้าที่ต้องมีการยืนยันตัวตนโดยไม่เข้าสู่ระบบ หรือเข้าถึงหน้าที่มีสิทธิ์พิเศษในฐานะผู้ใช้ทั่วไป", 
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "● การควบคุมการเข้าถึงจะมีประสิทธิภาพเมื่อใช้งานในโค้ดฝั่งเซิร์ฟเวอร์ที่เชื่อถือได้ หรือ API แบบไร้เซิร์ฟเวอร์ (Server-less API) ซึ่งผู้โจมตีไม่สามารถแก้ไขการตรวจสอบการควบคุมการเข้าถึงหรือข้อมูลเมตาได้", 
                img: "" 
            },
            { 
                sub: "● ตั้งค่าเป็น 'ปฏิเสธโดยค่าเริ่มต้น' (Deny by Default): ยกเว้นสำหรับทรัพยากรที่เปิดให้สาธารณะ", 
                img: "" 
            },
            { 
                sub: "● ตั้งค่าเป็น 'ปฏิเสธโดยค่าเริ่มต้น' (Deny by Default): ยกเว้นสำหรับทรัพยากรที่เปิดให้สาธารณะ", 
                img: "" 
            },
            { 
                sub: "● ควบคุมสิทธิ์ในระดับโมเดลข้อมูล (Model Access Controls):บังคับให้ตรวจสอบความเป็นเจ้าของข้อมูล (Record Ownership) แทนที่จะอนุญาตให้ผู้ใช้สามารถสร้าง อ่าน แก้ไข หรือลบข้อมูลใด ๆ ได้โดยอิสระ", 
                img: "" 
            },
            { 
                sub: "● บังคับใช้ข้อจำกัดเฉพาะที่เกี่ยวข้องกับการทำงานในแอปพลิเคชัน:โดยการออกแบบให้สอดคล้องกับโมเดลของโดเมนธุรกิจ", 
                img: "" 
            },
            { 
                sub: "● ปิดการใช้งานการแสดงรายการไดเรกทอรีของเว็บเซิร์ฟเวอร์ (Web Server Directory Listing):และตรวจสอบให้แน่ใจว่าไม่มีไฟล์ข้อมูลเมตา (เช่น .git) หรือไฟล์สำรอง (Backup Files) อยู่ในรูทของเว็บเซิร์ฟเวอร์", 
                img: "" 
            },
            { 
                sub: "● บันทึกความล้มเหลวในการควบคุมการเข้าถึง:แจ้งเตือนผู้ดูแลระบบเมื่อมีความเหมาะสม (เช่น การล้มเหลวซ้ำ ๆ)", 
                img: "" 
            },
            { 
                sub: "● จำกัดอัตราการเข้าถึง API และคอนโทรลเลอร์ (Rate Limiting):เพื่อลดความเสียหายที่เกิดจากเครื่องมือโจมตีแบบอัตโนมัติ", 
                img: "" 
            },
            { 
                sub: "● จัดการตัวระบุเซสชัน (Session Identifiers):ตัวระบุเซสชันแบบมีสถานะ (Stateful Session) ควรถูกยกเลิกบนเซิร์ฟเวอร์หลังจากออกจากระบบโทเค็น JWT แบบไม่มีสถานะ (Stateless JWT Tokens) ควรกำหนดอายุสั้น (Short-lived) เพื่อลดโอกาสของผู้โจมตีหากต้องการใช้ JWT ที่มีอายุยาว ควรปฏิบัติตามมาตรฐาน OAuth เพื่อรองรับการเพิกถอนการเข้าถึง", 
                img: "" 
            },
            { 
                sub: "● ทดสอบการควบคุมการเข้าถึง: นักพัฒนาและทีม QA ควรเขียนและทดสอบฟังก์ชันควบคุมการเข้าถึงทั้งในระดับยูนิต (Unit Test) และระดับการรวมระบบ (Integration Test)", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1:แอปพลิเคชันใช้ข้อมูลที่ไม่ได้รับการตรวจสอบในคำสั่ง SQL เพื่อเข้าถึงข้อมูลบัญชี:", 
                img: "https://gitlab.com/65015017/picture/-/raw/main/1.png" 
            },
            { 
                sub: "ผู้โจมตีสามารถปรับเปลี่ยนพารามิเตอร์ acct ในเบราว์เซอร์เพื่อส่งหมายเลขบัญชีใดๆ ที่ต้องการได้ หากไม่มีการตรวจสอบข้อมูลอย่างเหมาะสม ผู้โจมตีสามารถเข้าถึงบัญชีของผู้ใช้รายอื่นได้", 
                img: "https://gitlab.com/65015017/picture/-/raw/main/2.png" 
            },
            { 
                sub: "สถานการณ์ที่ 2:ผู้โจมตีทำการลัดผ่าน (Force Browsing) ไปยัง URL เป้าหมาย หน้าผู้ดูแลระบบต้องการสิทธิ์ Admin ในการเข้าถึง:", 
                img: "https://gitlab.com/65015017/picture/-/raw/main/3.png" 
            },
            { 
                sub: "หากผู้ใช้ที่ไม่ได้รับการยืนยันตัวตนสามารถเข้าถึงหน้าใดหน้าหนึ่งได้ แสดงว่าเกิดช่องโหว่หากผู้ใช้ที่ไม่ใช่ Admin สามารถเข้าถึงหน้าผู้ดูแลระบบได้ ก็ถือว่าเป็นช่องโหว่เช่นกัน", 
                img: "" 
            },
            
        ]
    },
    {
    id: 2,
        description: [
            { 
                sub: "A02:2021 – Cryptographic Failures", 
                img: "" 
            },
            { 
                sub: "ขั้นแรก ควรกำหนดความต้องการในการปกป้องข้อมูลทั้งในระหว่างการส่งผ่าน (Data in Transit) และข้อมูลที่จัดเก็บ (Data at Rest) เช่น รหัสผ่าน หมายเลขบัตรเครดิต ข้อมูลสุขภาพ ข้อมูลส่วนบุคคล และความลับทางธุรกิจ ซึ่งต้องการการป้องกันเป็นพิเศษ โดยเฉพาะหากข้อมูลเหล่านี้อยู่ภายใต้กฎหมายความเป็นส่วนตัว เช่น EU's General Data Protection Regulation (GDPR) หรือข้อบังคับ เช่น PCI Data Security Standard (PCI DSS) ข้อควรตรวจสอบสำหรับข้อมูลดังกล่าว ได้แก่:", 
                img: "" 
            },
            { 
                sub: "● ข้อมูลถูกส่งผ่านในรูปแบบข้อความธรรมดาหรือไม่? ตรวจสอบว่าไม่มีการส่งข้อมูลในรูปแบบข้อความธรรมดาผ่านโปรโตคอล เช่น HTTP, SMTP, FTP หรือ STARTTLS โดยเฉพาะการส่งข้อมูลผ่านอินเทอร์เน็ตภายนอก และยืนยันความปลอดภัยของข้อมูลภายใน เช่น การรับส่งระหว่าง Load Balancers และ Back-End"
            },
            { 
                sub: "● มีการใช้อัลกอริธึมหรือโปรโตคอลเข้ารหัสที่ล้าสมัยหรือไม่? ตรวจสอบว่ามีการใช้อัลกอริธึมเข้ารหัสหรือโปรโตคอลที่อ่อนแอหรือล้าสมัยอยู่ในโค้ดเก่าหรือไม่", 
                img: "" 
            },
            { 
                sub: "● การใช้คีย์เข้ารหัสที่ปลอดภัย: ตรวจสอบว่ามีการใช้คีย์เริ่มต้น (Default Keys) คีย์อ่อนแอ หรือคีย์ซ้ำหรือไม่ และมั่นใจว่ามีการจัดการหรือหมุนเวียนคีย์อย่างเหมาะสม คีย์ต้องไม่ถูกเก็บไว้ใน Repository ของซอร์สโค้ด", 
                img: "" 
            },
            { 
                sub: "● การบังคับใช้การเข้ารหัส: ตรวจสอบว่ามีการตั้งค่าการบังคับใช้งานเข้ารหัส เช่น การใช้ HTTP Security Headers เพื่อป้องกันการโจมตีจากฝั่งเบราว์เซอร์", 
                img: "" 
            },
            { 
                sub: "● การตรวจสอบใบรับรองของเซิร์ฟเวอร์: ตรวจสอบว่าใบรับรองของเซิร์ฟเวอร์และ Trust Chain ได้รับการตรวจสอบและมีความน่าเชื่อถือ", 
                img: "" 
            },
            { 
                sub: "● การตั้งค่า Initialization Vectors (IVs): ตรวจสอบว่า IVs ไม่ถูกละเลย ใช้ซ้ำ หรือสร้างอย่างไม่ปลอดภัย และไม่มีการใช้โหมดการเข้ารหัสที่ไม่ปลอดภัย เช่น ECB (Electronic Codebook)", 
                img: "" 
            },
            { 
                sub: "● การใช้รหัสผ่านเป็นคีย์การเข้ารหัส: ตรวจสอบว่ามีการใช้ฟังก์ชันการสร้างคีย์จากรหัสผ่าน (Password-Based Key Derivation Function) เพื่อป้องกันการใช้รหัสผ่านโดยตรงเป็นคีย์", 
                img: "" 
            },
            { 
                sub: "● การสุ่มที่เหมาะสมสำหรับการเข้ารหัส: ใช้แหล่งความสุ่มที่ออกแบบมาสำหรับการเข้ารหัส และไม่กำหนด Seed ด้วยตนเองที่อาจไม่มีความสุ่มเพียงพอ" , 
                img: "" 
            },
            { 
                sub: "● การใช้ฟังก์ชันแฮช: หลีกเลี่ยงการใช้ฟังก์ชันแฮชที่ล้าสมัย เช่น MD5 หรือ SHA-1 และเลือกใช้ฟังก์ชันแฮชที่เหมาะสมสำหรับการเข้ารหัส", 
                img: "" 
            },
            { 
                sub: "● การใช้ Padding Method: หลีกเลี่ยงการใช้ Padding Method ที่ล้าสมัย เช่น PKCS#1 v1.5 และเลือกใช้ Padding ที่เหมาะสมกับมาตรฐานปัจจุบัน", 
                img: "" 
            },
            { 
                sub: "● ข้อผิดพลาดจากการเข้ารหัสหรือช่องโหว่ Side Channel: ตรวจสอบและป้องกันช่องโหว่ เช่น Padding Oracle Attack ที่อาจเกิดจากการจัดการข้อผิดพลาดในการเข้ารหัสที่ไม่เหมาะสม", 
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "● จัดประเภทข้อมูลที่จัดการโดยแอปพลิเคชัน: ระบุว่าข้อมูลใดมีความสำคัญหรืออยู่ภายใต้กฎหมายและข้อบังคับ เช่น GDPR หรือ PCI DSS", 
                img: "" 
            },
            { 
                sub: "● ลบข้อมูลสำคัญที่ไม่จำเป็นต้องจัดเก็บ: ใช้การลดข้อมูล เช่น Tokenization หรือ Truncation เพื่อลดความเสี่ยงที่ข้อมูลจะถูกขโมย", 
                img: "" 
            },
            { 
                sub: "● เข้ารหัสข้อมูลที่สำคัญขณะพัก (Data at Rest): ใช้อัลกอริธึมการเข้ารหัสที่แข็งแกร่งและทันสมัย", 
                img: "" 
            },
            { 
                sub: "● เข้ารหัสข้อมูลที่ส่งผ่าน (Data in Transit): ใช้โปรโตคอลปลอดภัย เช่น TLS พร้อมการตั้งค่า Forward Secrecy และใช้ HSTS เพื่อบังคับให้ส่งข้อมูลแบบเข้ารหัส", 
                img: "" 
            },
            { 
                sub: "● ปิดการแคชข้อมูลสำคัญ: ป้องกันการแคชข้อมูลในเบราว์เซอร์หรือเซิร์ฟเวอร์ ", 
                img: "" 
            },
            { 
                sub: "● หลีกเลี่ยงโปรโตคอลเก่าสำหรับการส่งข้อมูลสำคัญ: เช่น FTP และ SMTP", 
                img: "" 
            },
            { 
                sub: "● จัดเก็บรหัสผ่านอย่างปลอดภัย: ใช้ฟังก์ชันแฮชแบบ Adaptive เช่น Argon2, bcrypt หรือ scrypt พร้อม Salt และ Work Factor", 
                img: "" 
            },
            { 
                sub: "● ตั้งค่าการเข้ารหัสและ IV อย่างเหมาะสม: ใช้ IVs แบบสุ่มที่ปลอดภัย (CSPRNG) หรือ Nonce ที่ไม่ซ้ำกันเมื่อจำเป็น", 
                img: "" 
            },
            { 
                sub: "● ใช้การเข้ารหัสแบบ Authenticated Encryption: เช่น AES-GCM หรือ AES-CCM แทนการเข้ารหัสธรรมดา", 
                img: "" 
            },
            { 
                sub: "● การจัดการคีย์การเข้ารหัสอย่างปลอดภัย: สร้างคีย์แบบสุ่มที่ปลอดภัยและหลีกเลี่ยงการเก็บคีย์ไว้ในโค้ด", 
                img: "" 
            },
            { 
                sub: "● หลีกเลี่ยงอัลกอริธึมและ Padding Scheme ที่ล้าสมัย: เช่น MD5, SHA1, และ PKCS#1 v1.5", 
                img: "" 
            },
            { 
                sub: "● ตรวจสอบและทดสอบการตั้งค่าความปลอดภัยอย่างสม่ำเสมอ: ดำเนินการตรวจสอบอย่างอิสระเพื่อยืนยันประสิทธิภาพของการตั้งค่า", 
                img: "" 
            },
        ],
        // 2 ไม่มีรูป
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1: การเข้ารหัสข้อมูลในฐานข้อมูลที่อ่อนแอ", 
                img: "" 
            },
            { 
                sub: "● แอปพลิเคชันเข้ารหัสหมายเลขบัตรเครดิตในฐานข้อมูลโดยใช้ระบบเข้ารหัสอัตโนมัติของฐานข้อมูล", 
                img: "" 
            },
            { 
                sub: "● อย่างไรก็ตาม ข้อมูลจะถูกถอดรหัสอัตโนมัติเมื่อมีการดึงข้อมูลออกมา", 
                img: "" 
            },
            { 
                sub: "● หากแอปพลิเคชันมีช่องโหว่ SQL Injection ผู้โจมตีสามารถใช้ช่องโหว่นี้เพื่อดึงข้อมูลหมายเลขบัตรเครดิตในรูปแบบข้อความธรรมดา", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: การไม่บังคับใช้ TLS และการเข้ารหัสที่อ่อนแอ", 
                img: "" 
            },
            { 
                sub: "● เว็บไซต์ไม่ได้บังคับให้ใช้ TLS สำหรับทุกหน้า หรือรองรับการเข้ารหัสที่อ่อนแอ", 
                img: "" 
            },
            { 
                sub: "● ผู้โจมตีสามารถดักฟังทราฟฟิกเครือข่าย (เช่น บนเครือข่ายไร้สายที่ไม่ปลอดภัย) และบังคับลดระดับการเชื่อมต่อจาก HTTPS เป็น HTTP", 
                img: "" 
            },
            { 
                sub: "● จากนั้น ผู้โจมตีสามารถดักจับคำขอและขโมยคุกกี้ของเซสชันผู้ใช้", 
                img: "" 
            },
            { 
                sub: "● ผู้โจมตีอาจใช้คุกกี้นี้เพื่อเข้าสู่ระบบในฐานะผู้ใช้ และเข้าถึงหรือแก้ไขข้อมูลส่วนตัวของผู้ใช้งาน", 
                img: "" 
            },
            { 
                sub: "● ผู้โจมตีอาจเปลี่ยนแปลงข้อมูลที่ถูกส่ง เช่น เปลี่ยนผู้รับเงินในการโอน", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3: การจัดเก็บรหัสผ่านอย่างไม่ปลอดภัย", 
                img: "" 
            },
            { 
                sub: "● ฐานข้อมูลจัดเก็บรหัสผ่านของผู้ใช้ด้วยแฮชที่ไม่มีการเติมเกลือ (Unsalted Hash) หรือใช้แฮชที่เรียบง่าย", 
                img: "" 
            },
            { 
                sub: "● ช่องโหว่ในการอัปโหลดไฟล์ช่วยให้ผู้โจมตีสามารถเข้าถึงฐานข้อมูลรหัสผ่าน", 
                img: "" 
            },
            { 
                sub: "● ผู้โจมตีสามารถถอดรหัสแฮชที่ไม่มีเกลือได้ด้วยการใช้ Rainbow Table ที่เตรียมไว้ล่วงหน้า", 
                img: "" 
            },
            { 
                sub: "● แม้ว่าแฮชจะมีการเติมเกลือ แต่หากใช้ฟังก์ชันแฮชที่เร็วและง่ายต่อการคำนวณ ผู้โจมตีสามารถใช้ GPU เพื่อถอดรหัสได้อย่างรวดเร็ว", 
                img: "" 
            },
            
        ]
    },
    {
        id: 3,
        description: [
            { 
                sub: "A03:2021 – Injection", 
                img: "" 
            },
            { 
                sub: "แอปพลิเคชันมีความเสี่ยงต่อการโจมตีเมื่อ: ", 
                img: "" 
            },
            { 
                sub: "● ไม่ได้ตรวจสอบข้อมูลที่ผู้ใช้ส่งมา: ข้อมูลไม่ได้รับการตรวจสอบ, กรอง หรือทำความสะอาด (Validate, Filter, Sanitize)",
                img: "" 
            },
            { 
                sub: "● ใช้คำสั่งแบบไดนามิกหรือการเรียกใช้งานที่ไม่มีการป้องกัน: ใช้คำสั่งหรือการเรียกใช้งานแบบไม่ระบุพารามิเตอร์ (Non-Parameterized Calls) หรือ ไม่มีการหลีกเลี่ยงอักขระพิเศษ (Escaping) ที่เหมาะสมกับบริบทในตัวแปลคำสั่ง", 
                img: "" 
            },
            { 
                sub: "● ข้อมูลที่เป็นอันตรายถูกใช้ในคำค้นหาของ ORM: ใช้ข้อมูลที่อาจเป็นอันตรายในพารามิเตอร์ของ Object-Relational Mapping (ORM) เพื่อดึงข้อมูลที่ละเอียดอ่อนเพิ่มเติม", 
                img: "" 
            },
            { 
                sub: "● ข้อมูลที่เป็นอันตรายถูกใช้หรือเชื่อมต่อโดยตรงในคำสั่ง: โครงสร้าง SQL หรือคำสั่งอื่น ๆ มีข้อมูลที่เป็นอันตรายถูกฝังอยู่โดยตรงในคำสั่งไดนามิก คำสั่ง หรือ Stored Procedures", 
                img: "" 
            },
            { 
                sub: "ตัวอย่างการโจมตี Injection ที่พบบ่อย: SQL Injection, NoSQL Injection, OS Command Injection, ORM Injection, LDAP Injection, Expression Language (EL) Injection, และ Object Graph Navigation Library (OGNL) Injection.", 
                img: "" 
            },
            
        ],
        HowtoPrevent: [
            { 
                sub: "การป้องกันการโจมตี Injection จำเป็นต้องแยกข้อมูลออกจากคำสั่งและคำค้นหา:", 
                img: "" 
            },
            { 
                sub: "● ใช้ API ที่ปลอดภัย (Safe API): หลีกเลี่ยงการใช้ตัวแปลคำสั่ง (Interpreter) โดยตรง, ใช้อินเทอร์เฟซที่รองรับการระบุพารามิเตอร์ (Parameterized Interface), พิจารณาย้ายไปใช้เครื่องมือ Object Relational Mapping (ORM), หมายเหตุ: แม้ Stored Procedures จะมีการระบุพารามิเตอร์ แต่หากมีการเชื่อมต่อคำสั่งและข้อมูลใน PL/SQL หรือ T-SQL (เช่น EXECUTE IMMEDIATE หรือ exec()) ก็ยังมีความเสี่ยง", 
                img: "" 
            },
            { 
                sub: "● ใช้การตรวจสอบอินพุตด้านเซิร์ฟเวอร์ (Positive Server-Side Input Validation): ตรวจสอบและยืนยันความถูกต้องของข้อมูลที่ผู้ใช้งานส่งเข้ามา,หมายเหตุ: วิธีนี้ไม่สามารถป้องกันได้อย่างสมบูรณ์ เนื่องจากบางแอปพลิเคชันต้องรองรับอักขระพิเศษ เช่น การส่งข้อความหรือ API สำหรับแอปพลิเคชันมือถือ", 
                img: "" 
            },
            { 
                sub: "● หลีกเลี่ยงการเชื่อมต่อคำสั่งแบบไดนามิก (Dynamic Queries): หากยังต้องใช้คำสั่งไดนามิก ให้หลีกเลี่ยงอักขระพิเศษด้วยไวยากรณ์ที่เหมาะสมกับตัวแปลคำสั่งนั้น,หมายเหตุ: โครงสร้าง SQL เช่น ชื่อตารางหรือชื่อคอลัมน์ไม่สามารถหลีกเลี่ยงได้ และการใช้โครงสร้าง SQL ที่กำหนดโดยผู้ใช้งานยังคงเป็นอันตราย ซึ่งมักเกิดในซอฟต์แวร์เขียนรายงาน", 
                img: "" 
            },
            { 
                sub: "● ใช้คำสั่ง SQL เช่น LIMIT: เพิ่มข้อจำกัดในคำค้นหา เช่น LIMIT เพื่อป้องกันการดึงข้อมูลจำนวนมากในกรณีที่มีการโจมตี SQL Injection.", 
                img: "" 
            },
           
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1: การสร้างคำสั่ง SQL ที่ไม่ปลอดภัยจากข้อมูลที่ไม่น่าเชื่อถือ", 
                img: "https://gitlab.com/65015017/picture/-/raw/main/4.png" 
            },
            { 
                sub: "● ในกรณีนี้ แอปพลิเคชันใช้ข้อมูลที่ผู้ใช้ส่งมา (id) โดยตรงในการสร้างคำสั่ง SQL ซึ่งเปิดช่องให้ผู้โจมตีสามารถฝังคำสั่งอันตรายได้", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: ความไว้วางใจใน Framework ที่นำไปสู่ช่องโหว่ ", 
                img: "https://gitlab.com/65015017/picture/-/raw/main/5.png" 
            },
            { 
                sub: "● แม้จะใช้ Framework เช่น Hibernate ที่สนับสนุน HQL (Hibernate Query Language) แต่หากข้อมูลผู้ใช้ (id) ถูกใช้โดยตรงในการสร้างคำสั่ง ก็ยังคงมีความเสี่ยง", 
                img: "" 
            },
            { 
                sub: "ตัวอย่างการโจมตี:", 
                img: "" 
            },
            { 
                sub: "● ผู้โจมตีแก้ไขค่า id ใน URL ที่ส่งไปยังเซิร์ฟเวอร์:", 
                img: "https://gitlab.com/65015017/picture/-/raw/main/6.png" 
            },
            { 
                sub: "● การโจมตีนี้เปลี่ยนความหมายของคำสั่ง SQL ให้ดึงข้อมูลทั้งหมดจากตาราง accounts และใช้ฟังก์ชัน SLEEP(10) เพื่อหยุดการทำงานของระบบชั่วคราว", 
                img: "" 
            },
            
        ]
    },
    {
        id: 4,
            description: [
                { 
                    sub: "A04:2021 – Insecure Design", 
                    img: "" 
                },
                { 
                    sub: "Insecure Design เป็นหมวดหมู่ที่ครอบคลุมถึงความอ่อนแอหลายรูปแบบ โดยอธิบายว่าเกิดจาก “การออกแบบที่ขาดหรือไม่มีประสิทธิภาพ” ความแตกต่างหลักระหว่าง Insecure Design และ Insecure Implementation คือ:", 
                    img: "" 
                },
                { 
                    sub: "● Insecure Design: เกิดจากข้อบกพร่องในการออกแบบที่ไม่มีการสร้างกลไกความปลอดภัยเพียงพอตั้งแต่ต้น", 
                    img: "" 
                },
                { 
                    sub: "● Insecure Implementation: เป็นข้อผิดพลาดในการนำไปใช้งาน แม้การออกแบบจะถูกต้อง", 
                    img: "" 
                },
                { 
                    sub: "ข้อแนะนำการออกแบบและพัฒนาเพื่อความปลอดภัย", 
                    img: "" 
                },
                { 
                    sub: "การจัดการข้อกำหนดและทรัพยากร (Requirements and Resource Management):", 
                    img: "" 
                },
                { 
                    sub: "● รวบรวมและประสานข้อกำหนดทางธุรกิจกับความต้องการด้านการป้องกันข้อมูล เช่น ความลับ (Confidentiality), ความถูกต้อง (Integrity), ความพร้อมใช้งาน (Availability), และความน่าเชื่อถือ (Authenticity)", 
                    img: "" 
                },
                { 
                    sub: "● พิจารณาว่าระบบของคุณต้องมีการแยกผู้เช่า (Tenant Segregation) เพิ่มเติมหรือไม่ ", 
                    img: "" 
                },
                { 
                    sub: "● จัดทำข้อกำหนดทางเทคนิค รวมถึงข้อกำหนดด้านความปลอดภัยทั้งเชิงฟังก์ชันและไม่ใช่ฟังก์ชัน ", 
                    img: "" 
                },
                { 
                    sub: "● วางแผนและกำหนดงบประมาณสำหรับการออกแบบ การพัฒนา การทดสอบ และการดำเนินการที่ครอบคลุมกิจกรรมด้านความปลอดภัย", 
                    img: "" 
                },
                { 
                    sub: "การออกแบบเพื่อความปลอดภัย (Secure Design):", 
                    img: "" 
                },
                { 
                    sub: "● สร้างวัฒนธรรมการออกแบบที่มุ่งเน้นความปลอดภัย โดยประเมินภัยคุกคามและทดสอบความปลอดภัยของโค้ด ", 
                    img: "" 
                },
                { 
                    sub: "● ใช้ Threat Modeling ในการวิเคราะห์การเปลี่ยนแปลงของ Data Flow และการควบคุมความปลอดภัย", 
                    img: "" 
                },
                { 
                    sub: "● ระบุและทำความเข้าใจการทำงานตามปกติและสถานะที่ล้มเหลวในระหว่างการพัฒนาฟีเจอร์", 
                    img: "" 
                },
                { 
                    sub: "● วิเคราะห์สมมติฐานและเงื่อนไขที่เกี่ยวข้องกับการทำงานและสถานะที่ล้มเหลว", 
                    img: "" 
                },
                { 
                    sub: "● เรียนรู้จากข้อผิดพลาดที่ผ่านมา และสร้างแรงจูงใจเชิงบวกเพื่อปรับปรุงกระบวนการ", 
                    img: "" 
                },
                { 
                    sub: "● Secure Design ไม่ใช่การเพิ่มเติมทีหลังหรือเครื่องมือที่สามารถแทรกในซอฟต์แวร์ได้", 
                    img: "" 
                },
                { 
                    sub: "วงจรการพัฒนาซอฟต์แวร์อย่างปลอดภัย (Secure Development Lifecycle):", 
                    img: "" 
                },
                { 
                    sub: "● ใช้วงจรการพัฒนาซอฟต์แวร์ที่ปลอดภัย (Secure Development Lifecycle) เช่น การใช้ Secure Design Pattern, Paved Road Methodology, และ Threat Modeling", 
                    img: "" 
                },
                { 
                    sub: "● ทำงานร่วมกับผู้เชี่ยวชาญด้านความปลอดภัยตั้งแต่เริ่มต้นโครงการจนถึงขั้นตอนการดูแลรักษา", 
                    img: "" 
                },
                { 
                    sub: "● ใช้ประโยชน์จากโมเดล เช่น OWASP Software Assurance Maturity Model (SAMM) เพื่อช่วยจัดโครงสร้างในการพัฒนาซอฟต์แวร์อย่างปลอดภัย", 
                    img: "" 
                },
                
            ],
            HowtoPrevent: [
                { 
                    sub: "● สร้างและใช้วงจรการพัฒนาซอฟต์แวร์ที่ปลอดภัย (Secure Development Lifecycle): ทำงานร่วมกับผู้เชี่ยวชาญด้านความปลอดภัย (AppSec professionals) เพื่อช่วยในการประเมินและออกแบบการควบคุมความปลอดภัยและความเป็นส่วนตัว", 
                    img: "" 
                },
                { 
                    sub: "● สร้างและใช้ห้องสมุดของรูปแบบการออกแบบที่ปลอดภัย (Secure Design Patterns): ใช้รูปแบบการออกแบบที่ปลอดภัยหรือคอมโพเนนต์ที่พร้อมใช้งานในการพัฒนา", 
                    img: "" 
                },
                { 
                    sub: "● ใช้การวิเคราะห์ภัยคุกคาม (Threat Modeling): ใช้การวิเคราะห์ภัยคุกคามในขั้นตอนสำคัญ เช่น การยืนยันตัวตน การควบคุมการเข้าถึง ลอจิกทางธุรกิจ และกระบวนการสำคัญอื่น ๆ", 
                    img: "" 
                },
                { 
                    sub: "● รวมการควบคุมความปลอดภัยใน User Stories: รวมภาษาและการควบคุมความปลอดภัยในกระบวนการพัฒนาฟีเจอร์ในลักษณะของ user stories", 
                    img: "" 
                },
                { 
                    sub: "● ตรวจสอบความสมเหตุสมผลในทุกขั้นตอนของแอปพลิเคชัน (Plausibility Checks): ตรวจสอบความสมเหตุสมผลในทุกขั้นตอน ตั้งแต่ frontend ไปจนถึง backend", 
                    img: "" 
                },
                { 
                    sub: "● เขียนการทดสอบแบบ Unit และ Integration Tests: เขียนการทดสอบเพื่อยืนยันว่ากระบวนการสำคัญทุกอย่างทนต่อภัยคุกคามที่ได้รับการวิเคราะห์ใน threat model", 
                    img: "" 
                },
                { 
                    sub: "● แยกชั้นการทำงาน (Tier Segregation) ในระบบและเครือข่าย: แยกชั้นการทำงานในระบบและเครือข่ายตามระดับการเปิดเผยและความต้องการในการป้องกัน", 
                    img: "" 
                },
                { 
                    sub: "● แยกผู้เช่า (Tenant Segregation): แยกผู้เช่าอย่างมั่นคงตามการออกแบบในทุกชั้นของระบบ", 
                    img: "" 
                },
                { 
                    sub: "● แยกผู้เช่า (Tenant Segregation): แยกผู้เช่าอย่างมั่นคงตามการออกแบบในทุกชั้นของระบบ", 
                    img: "" 
                },
            ],
            ExampleAttackScenarios: [
                { 
                    sub: "สถานการณ์ที่ 1: การกู้คืนข้อมูลประจำตัวที่ไม่ปลอดภัย", 
                    img: "" 
                },
                { 
                    sub: "● กระบวนการกู้คืนข้อมูลประจำตัวอาจรวมถึง 'คำถามและคำตอบ' ซึ่งไม่ได้รับการยอมรับจากมาตรฐาน NIST 800-63b, OWASP ASVS, และ OWASP Top 10 เนื่องจากคำถามและคำตอบไม่สามารถไว้วางใจเป็นหลักฐานการยืนยันตัวตนได้ เนื่องจากหลายคนอาจรู้คำตอบดังกล่าว การใช้กระบวนการนี้ควรถูกลบออกและแทนที่ด้วยการออกแบบที่ปลอดภัยกว่า", 
                    img: "" 
                },
                { 
                    sub: "สถานการณ์ที่ 2: การจองตั๋วกลุ่มและการโจมตีจากผู้กระทำการละเมิด", 
                    img: "" 
                },
                { 
                    sub: "● เครือข่ายโรงภาพยนตร์อนุญาตให้มีส่วนลดสำหรับการจองกลุ่มและจำกัดจำนวนผู้เข้าชมที่ 15 คน ก่อนที่ต้องชำระเงินมัดจำ ผู้โจมตีอาจทำการทดสอบการจองที่นั่งหลายร้อยที่นั่งในคำขอเดียว เพื่อสร้างความสูญเสียรายได้ครั้งใหญ่ โดยใช้การวิเคราะห์ภัยคุกคาม (Threat Modeling) และหาวิธีที่จะจองที่นั่งจำนวนมากในคราวเดียว", 
                    img: "" 
                },
                { 
                    sub: "สถานการณ์ที่ 3: การโจมตีจากบ็อตในการซื้อการ์ดกราฟิก", 
                    img: "" 
                },
                { 
                    sub: "● เว็บไซต์อีคอมเมิร์ซของร้านค้าปลีกไม่มีการป้องกันจากบ็อตที่ถูกใช้โดยผู้ค้ามืออาชีพเพื่อซื้อการ์ดกราฟิกระดับสูงจำนวนมากแล้วนำไปขายต่อในเว็บไซต์ประมูล การออกแบบระบบป้องกันบ็อตและกฎลอจิกโดเมน เช่น การซื้อที่ทำในไม่กี่วินาทีหลังจากที่สินค้าถูกปล่อยออกมาจะช่วยตรวจจับการซื้อที่ไม่ถูกต้องและปฏิเสธการทำธุรกรรมดังกล่าว", 
                    img: "" 
                },
                
            ]
        },
        {
            id: 5,
                description: [
                    { 
                        sub: "A05:2021 – Security Misconfiguration", 
                        img: "" 
                    },
                    { 
                        sub: "แอปพลิเคชันอาจมีช่องโหว่หาก:", 
                        img: "" 
                    },
                    { 
                        sub: "● การป้องกันความปลอดภัยในแต่ละส่วนของแอปพลิเคชันขาดหายหรือไม่ได้ถูกเสริมความแข็งแกร่ง รวมถึงการตั้งค่าการอนุญาตบนบริการคลาวด์ที่ไม่เหมาะสม", 
                        img: ""
                    },
                    { 
                        sub: "● ฟีเจอร์ที่ไม่จำเป็นถูกเปิดใช้งานหรือติดตั้ง เช่น พอร์ต, บริการ, หน้าเว็บ, บัญชีผู้ใช้ หรือสิทธิพิเศษที่ไม่จำเป็น", 
                        img: "" 
                    },
                    { 
                        sub: "● บัญชีและรหัสผ่านเริ่มต้นยังคงถูกใช้งาน บัญชีเริ่มต้นเหล่านี้ไม่ได้ถูกปิดหรือเปลี่ยนแปลง", 
                        img: "" 
                    },
                    { 
                        sub: "● การจัดการข้อผิดพลาดแสดงข้อความหรือรายละเอียดมากเกินไป เช่น แสดง Stack Trace หรือข้อมูลที่ช่วยให้ผู้ใช้งานทราบถึงโครงสร้างภายใน", 
                        img: "" 
                    },
                    { 
                        sub: "● ระบบที่อัปเกรดยังไม่ได้เปิดใช้งานฟีเจอร์ความปลอดภัยล่าสุด หรือไม่ได้ถูกตั้งค่าให้ปลอดภัย", 
                        img: "" 
                    },
                    { 
                        sub: "● การตั้งค่าความปลอดภัยในเซิร์ฟเวอร์หรือเฟรมเวิร์กไม่เหมาะสม รวมถึงเฟรมเวิร์กเช่น Struts, Spring, ASP.NET และฐานข้อมูลต่าง ๆ", 
                        img: "" 
                    },
                    { 
                        sub: "● เซิร์ฟเวอร์ไม่ได้ส่ง Security Headers หรือ Directive ที่เหมาะสม หรือค่าที่ตั้งไว้ไม่ได้ปลอดภัย", 
                        img: "" 
                    },
                    { 
                        sub: "● ซอฟต์แวร์ไม่ได้รับการอัปเดต หรือใช้งานเวอร์ชันที่มีช่องโหว่ (อ้างอิง A06:2021-Vulnerable and Outdated Components)", 
                        img: "" 
                    },
                ],
                HowtoPrevent: [
                    { 
                        sub: "การติดตั้งระบบที่ปลอดภัยควรดำเนินการตามขั้นตอนต่อไปนี้:", 
                        img: "" 
                    },
                    { 
                        sub: "กระบวนการเพิ่มความแข็งแกร่ง (Hardening Process):", 
                        img: "" 
                    },
                    { 
                        sub: "● สร้างกระบวนการเพิ่มความแข็งแกร่งซ้ำได้ เพื่อให้สามารถตั้งค่าระบบใหม่ที่มีการล็อกความปลอดภัยไว้อย่างเหมาะสมได้อย่างรวดเร็ว", 
                        img: "" 
                    },
                    { 
                        sub: "● สภาพแวดล้อมสำหรับการพัฒนา (Development), ทดสอบ (QA) และการใช้งานจริง (Production) ควรได้รับการตั้งค่าให้เหมือนกัน โดยใช้ข้อมูลประจำตัว (Credentials) ที่แตกต่างกันในแต่ละสภาพแวดล้อม", 
                        img: "" 
                    },
                    { 
                        sub: "● ควรทำให้กระบวนการนี้เป็นระบบอัตโนมัติเพื่อลดความยุ่งยากในการตั้งค่าระบบใหม่", 
                        img: "" 
                    },
                    { 
                        sub: "แพลตฟอร์มที่เรียบง่าย:", 
                        img: "" 
                    },
                    { 
                        sub: "● ใช้แพลตฟอร์มที่ลดฟีเจอร์ที่ไม่จำเป็นออกทั้งหมด รวมถึงเอกสารประกอบและตัวอย่างที่ไม่ใช้", 
                        img: "" 
                    },
                    { 
                        sub: "● ลบหรือไม่ติดตั้งฟีเจอร์หรือเฟรมเวิร์กที่ไม่จำเป็น", 
                        img: "" 
                    },
                    { 
                        sub: "การตรวจสอบและอัปเดตการตั้งค่า:", 
                        img: "" 
                    },
                    { 
                        sub: "● กำหนดงานสำหรับการตรวจสอบและอัปเดตการตั้งค่าตามบันทึกด้านความปลอดภัย การอัปเดต และแพตช์ที่เกี่ยวข้องในกระบวนการจัดการแพตช์", 
                        img: "" 
                    },
                    { 
                        sub: "● ตรวจสอบสิทธิ์การเข้าถึงพื้นที่จัดเก็บในคลาวด์ เช่น การตั้งค่าสิทธิ์ S3 bucket", 
                        img: "" 
                    },
                    { 
                        sub: "สถาปัตยกรรมแอปพลิเคชันที่แยกส่วน:", 
                        img: "" 
                    },
                    { 
                        sub: "● ใช้สถาปัตยกรรมที่แยกส่วนอย่างมีประสิทธิภาพและปลอดภัยระหว่างองค์ประกอบหรือผู้เช่า (Tenants)", 
                        img: "" 
                    },
                    { 
                        sub: "● ใช้การแบ่งแยก (Segmentation), การใช้คอนเทนเนอร์ (Containerization), หรือกลุ่มความปลอดภัยในคลาวด์ (Cloud Security Groups - ACLs)", 
                        img: "" 
                    },
                    { 
                        sub: "การส่งคำสั่งความปลอดภัย (Security Directives) ไปยังลูกค้า:", 
                        img: "" 
                    },
                    { 
                        sub: "● กำหนดค่า Security Headers เพื่อให้คำสั่งความปลอดภัยส่งไปยังลูกค้า", 
                        img: "" 
                    },
                    { 
                        sub: "กระบวนการตรวจสอบอัตโนมัติ:", 
                        img: "" 
                    },
                    { 
                        sub: "● สร้างกระบวนการตรวจสอบแบบอัตโนมัติเพื่อยืนยันว่าการตั้งค่าและค่าคอนฟิกในทุกสภาพแวดล้อมมีความปลอดภัยและมีประสิทธิภาพ", 
                        img: "" 
                    },
                ],
                ExampleAttackScenarios: [
                    { 
                        sub: "สถานการณ์ที่ 1:", 
                        img: "" 
                    },
                    { 
                        sub: "● เซิร์ฟเวอร์แอปพลิเคชันมาพร้อมกับตัวอย่างแอปพลิเคชันที่ไม่ได้ลบออกจากเซิร์ฟเวอร์การผลิต แอปพลิเคชันตัวอย่างเหล่านี้มีช่องโหว่ด้านความปลอดภัยที่ทราบ ซึ่งผู้โจมตีใช้เพื่อเจาะระบบ สมมติว่าแอปพลิเคชันตัวอย่างเป็นคอนโซลสำหรับผู้ดูแลระบบ (Admin Console) และบัญชีผู้ใช้เริ่มต้น (Default Accounts) ไม่ได้เปลี่ยนรหัสผ่าน ผู้โจมตีสามารถเข้าสู่ระบบด้วยรหัสผ่านเริ่มต้นและยึดครองระบบได้", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 2:", 
                        img: "" 
                    },
                    { 
                        sub: "● การตั้งค่าของเซิร์ฟเวอร์ไม่ได้ปิดการแสดงรายการไดเรกทอรี (Directory Listing) ทำให้ผู้โจมตีสามารถดูรายการไดเรกทอรีได้ ผู้โจมตีพบและดาวน์โหลดไฟล์ Java Classes ที่คอมไพล์แล้ว จากนั้นนำไปถอดรหัส (Decompile) และวิศวกรรมย้อนกลับ (Reverse Engineer) เพื่อดูโค้ด ผู้โจมตีจึงพบข้อบกพร่องด้านการควบคุมการเข้าถึงที่ร้ายแรงในแอปพลิเคชัน", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 3:", 
                        img: "" 
                    },
                    { 
                        sub: "● การตั้งค่าของเซิร์ฟเวอร์แอปพลิเคชันอนุญาตให้แสดงข้อความแสดงข้อผิดพลาด (Error Messages) ที่ละเอียด เช่น Stack Traces แก่ผู้ใช้ สิ่งนี้อาจเผยข้อมูลที่อ่อนไหวหรือข้อบกพร่องพื้นฐาน เช่น เวอร์ชันของคอมโพเนนต์ที่ทราบว่ามีช่องโหว่", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 4:", 
                        img: "" 
                    },
                    { 
                        sub: "● ผู้ให้บริการคลาวด์ (Cloud Service Provider - CSP) ตั้งค่าการอนุญาตเริ่มต้น (Default Sharing Permissions) ให้เปิดสำหรับการเข้าถึงผ่านอินเทอร์เน็ตโดยผู้ใช้ CSP คนอื่นๆ ส่งผลให้ข้อมูลที่จัดเก็บในคลาวด์สามารถถูกเข้าถึงโดยไม่ได้รับอนุญาต", 
                        img: "" 
                    },
                    
                ]
        },
        {
            id: 6,
                description: [
                    { 
                        sub: "A06:2021 – Vulnerable and Outdated Components", 
                        img: "" 
                    },
                    { 
                        sub: "คุณอาจเสี่ยงต่อการถูกโจมตี หากมีลักษณะดังต่อไปนี้:", 
                        img: "" 
                    },
                    { 
                        sub: "● ไม่ทราบเวอร์ชันของคอมโพเนนต์ทั้งหมดที่ใช้งานทั้งฝั่งไคลเอนต์และฝั่งเซิร์ฟเวอร์ รวมถึงคอมโพเนนต์ที่ใช้งานโดยตรงและที่เป็นการพึ่งพาแบบซ้อน (Nested Dependencies)", 
                        img: ""
                    },
                    { 
                        sub: "● ซอฟต์แวร์มีช่องโหว่, ไม่ได้รับการสนับสนุน, หรือไม่ได้อัปเดตครอบคลุมระบบปฏิบัติการ (OS), เซิร์ฟเวอร์เว็บ/แอปพลิเคชัน, ระบบจัดการฐานข้อมูล (DBMS), แอปพลิเคชัน, APIs, คอมโพเนนต์ทั้งหมด, สภาพแวดล้อมการรันไทม์, และไลบรารี", 
                        img: "" 
                    },
                    { 
                        sub: "● ไม่สแกนหาช่องโหว่เป็นประจำ หรือไม่สมัครรับข้อมูลข่าวสารด้านความปลอดภัยที่เกี่ยวข้องกับคอมโพเนนต์ที่ใช้งาน", 
                        img: "" 
                    },
                    { 
                        sub: "● ไม่แก้ไขหรืออัปเกรดแพลตฟอร์ม, เฟรมเวิร์ก, และการพึ่งพาโดยอิงจากการประเมินความเสี่ยงในเวลาที่เหมาะสม มักเกิดในสภาพแวดล้อมที่การแพตช์เป็นงานรายเดือนหรือรายไตรมาสภายใต้การควบคุมการเปลี่ยนแปลง ทำให้องค์กรเปิดรับความเสี่ยงเป็นเวลาหลายวันหรือหลายเดือนโดยไม่จำเป็น", 
                        img: "" 
                    },
                    { 
                        sub: "● นักพัฒนาไม่ได้ทดสอบความเข้ากันได้ของไลบรารีที่ได้รับการอัปเดต, อัปเกรด, หรือแพตช์แล้ว", 
                        img: "" 
                    },
                    { 
                        sub: "● ไม่ได้รักษาความปลอดภัยในการตั้งค่าคอมโพเนนต์(ดูเพิ่มเติมใน A05:2021-Security Misconfiguration)", 
                        img: "" 
                    },
                    
                ],
                HowtoPrevent: [
                    { 
                        sub: "ควรมีกระบวนการจัดการแพตช์ (Patch Management) อย่างชัดเจน โดยสามารถดำเนินการดังนี้:", 
                        img: "" 
                    },
                    { 
                        sub: "ลบการพึ่งพา, ฟีเจอร์, คอมโพเนนต์, ไฟล์ และเอกสารที่ไม่จำเป็น", 
                        img: "" 
                    },
                    { 
                        sub: "● เพื่อลดพื้นที่ที่อาจถูกโจมตีและลดความซับซ้อนของระบบ", 
                        img: "" 
                    },
                    { 
                        sub: "ตรวจสอบและทำบัญชีรายการเวอร์ชันของคอมโพเนนต์ทั้งฝั่งไคลเอนต์และเซิร์ฟเวอร์อย่างต่อเนื่องเช่น เฟรมเวิร์กหรือไลบรารี รวมถึงการพึ่งพาที่เกี่ยวข้องโดยใช้เครื่องมือต่างๆ เช่น ", 
                        img: "" 
                    },
                    { 
                        sub: "● OWASP Dependency Check, Retire.js, Software Composition Analysis (SCA) Tools", 
                        img: "" 
                    },
                    { 
                        sub: "● ตรวจสอบแหล่งข้อมูล เช่น CVE (Common Vulnerability and Exposures) และ NVD (National Vulnerability Database) เพื่อค้นหาช่องโหว่ของคอมโพเนนต์", 
                        img: "" 
                    },
                    { 
                        sub: "ดาวน์โหลดคอมโพเนนต์จากแหล่งที่เป็นทางการผ่านลิงก์ที่ปลอดภัยเท่านั้น", 
                        img: "" 
                    },
                    { 
                        sub: "● เลือกใช้งานแพ็กเกจที่เซ็นรับรอง (Signed Packages) เพื่อลดโอกาสในการนำคอมโพเนนต์ที่ถูกแก้ไขหรือแฝงโค้ดอันตรายมาใช้งาน (ดูเพิ่มเติมใน A08:2021-Software and Data Integrity Failures)", 
                        img: "" 
                    },
                    { 
                        sub: "ติดตามไลบรารีและคอมโพเนนต์ที่ไม่ได้รับการดูแล", 
                        img: "" 
                    },
                    { 
                        sub: "● หรือไม่มีการสร้างแพตช์ด้านความปลอดภัยสำหรับเวอร์ชันเก่า หากไม่สามารถแพตช์ได้ ให้พิจารณาใช้ Virtual Patch เพื่อช่วยตรวจสอบและป้องกันปัญหา", 
                        img: "" 
                    },
                    { 
                        sub: "สร้างแผนระยะยาวสำหรับการตรวจสอบ, วิเคราะห์, และปรับใช้การอัปเดตหรือเปลี่ยนแปลงการตั้งค่าคอนฟิก", 
                        img: "" 
                    },
                    { 
                        sub: "● ให้เหมาะสมตลอดอายุการใช้งานของแอปพลิเคชันหรือโครงการทั้งหมดขององค์กร", 
                        img: "" 
                    },
                ],
                ExampleAttackScenarios: [
                    { 
                        sub: "สถานการณ์ที่ 1: คอมโพเนนต์ในระบบมักทำงานด้วยสิทธิ์เดียวกับแอปพลิเคชัน ดังนั้นหากมีข้อบกพร่องในคอมโพเนนต์ใด ๆ อาจส่งผลกระทบอย่างร้ายแรงได้ ข้อบกพร่องเหล่านี้อาจเกิดจาก:", 
                        img: "" 
                    },
                    { 
                        sub: "● ความผิดพลาดโดยไม่ได้ตั้งใจ (เช่น ข้อผิดพลาดในการเขียนโค้ด)", 
                        img: "" 
                    },
                    { 
                        sub: "● การตั้งใจแฝงช่องโหว่ (เช่น การฝัง Backdoor ในคอมโพเนนต์)", 
                        img: "" 
                    },
                    { 
                        sub: "ตัวอย่างช่องโหว่ในคอมโพเนนต์ที่ถูกค้นพบและถูกใช้โจมตี", 
                        img: "" 
                    },
                    { 
                        sub: "● CVE-2017-5638: ช่องโหว่ Remote Code Execution (RCE) ใน Struts 2 ที่ช่วยให้ผู้โจมตีสามารถรันโค้ดใด ๆ บนเซิร์ฟเวอร์ได้ ช่องโหว่นี้ถูกตำหนิว่าเป็นสาเหตุของการละเมิดข้อมูลครั้งใหญ่", 
                        img: "" 
                    },                    
                    { 
                        sub: "กรณีของ Internet of Things (IoT):", 
                        img: "" 
                    },
                    { 
                        sub: "● อุปกรณ์ IoT มักมีปัญหาในการแพตช์หรืออาจไม่สามารถแพตช์ได้เลย แต่การแพตช์มีความสำคัญสูง เช่น ในอุปกรณ์ทางการแพทย์ (Biomedical Devices)", 
                        img: "" 
                    },
                    { 
                        sub: "เครื่องมืออัตโนมัติที่ช่วยค้นหาระบบที่ไม่ได้แพตช์หรือมีการตั้งค่าผิดพลาด:", 
                        img: "" 
                    },
                    { 
                        sub: "● ตัวอย่างเช่น Shodan IoT Search Engine ซึ่งช่วยค้นหาอุปกรณ์ที่ยังคงมีช่องโหว่ Heartbleed ซึ่งได้รับการแพตช์ตั้งแต่เดือนเมษายน 2014 แต่ยังไม่ได้รับการแก้ไขในบางอุปกรณ์", 
                        img: "" 
                    },
                    { 
                        sub: "ช่องโหว่เหล่านี้สามารถนำไปใช้เพื่อโจมตีระบบและส่งผลเสียหายได้อย่างกว้างขวางหากไม่ได้รับการแก้ไขอย่างเหมาะสม", 
                        img: "" 
                    },                
                ]
        },
        {
            id: 7,
                description: [
                    { 
                        sub: "A07:2021 – Identification and Authentication Failures", 
                        img: "" 
                    },
                    { 
                        sub: "การยืนยันตัวตน, การตรวจสอบสิทธิ์ และการจัดการเซสชันเป็นสิ่งสำคัญในการป้องกันการโจมตีที่เกี่ยวข้องกับการยืนยันตัวตนหากแอปพลิเคชันมีช่องโหว่ในการยืนยันตัวตน อาจเกิดปัญหาต่อไปนี้ได้:", 
                        img: "" 
                    },
                    { 
                        sub: "● รองรับการโจมตีอัตโนมัติ เช่น Credential Stuffing ที่ผู้โจมตีใช้รายชื่อชื่อผู้ใช้และรหัสผ่านที่ถูกต้องเพื่อเข้าสู่ระบบ", 
                        img: ""
                    },
                    { 
                        sub: "● ยอมให้มีการโจมตีแบบ Brute Force หรือการโจมตีอัตโนมัติอื่น ๆ", 
                        img: "" 
                    },
                    { 
                        sub: "● อนุญาตให้ใช้รหัสผ่านที่อ่อนแอ หรือที่เป็นค่าตั้งต้น เช่น 'Password1' หรือ 'admin/admin'", 
                        img: "" 
                    },
                    { 
                        sub: "● มีระบบกู้คืนรหัสผ่านที่ไม่ปลอดภัย เช่น การใช้คำถามความปลอดภัยแบบ 'knowledge-based answers' ซึ่งสามารถถูกคาดเดาหรือเจาะได้ง่าย", 
                        img: "" 
                    },
                    { 
                        sub: "● ไม่มีหรือใช้ระบบยืนยันตัวตนแบบหลายขั้นตอน (Multi-Factor Authentication - MFA) ที่ไม่มีประสิทธิภาพ", 
                        img: "" 
                    },
                    { 
                        sub: "● เปิดเผย Session ID ใน URL ซึ่งอาจถูกดักจับและใช้เพื่อเข้ายึดเซสชัน", 
                        img: "" 
                    },
                    { 
                        sub: "● ใช้ Session ID ซ้ำหลังจากเข้าสู่ระบบสำเร็จ ทำให้เกิดความเสี่ยงต่อการโจมตี", 
                        img: "" 
                    },
                    { 
                        sub: "● ไม่ทำให้ Session ID หมดอายุอย่างถูกต้อง เช่น เมื่อผู้ใช้ออกจากระบบ หรือไม่มีการใช้งานเป็นเวลานาน ซึ่งอาจทำให้บัญชีถูกเข้าถึงโดยไม่ได้รับอนุญาต", 
                        img: "" 
                    },
                    
                ],
                HowtoPrevent: [
                    { 
                        sub: "● ใช้การยืนยันตัวตนแบบหลายขั้นตอน (Multi-Factor Authentication - MFA) เพื่อป้องกันการโจมตีแบบ credential stuffing, brute force, และการใช้ข้อมูลเข้าสู่ระบบที่ถูกขโมย", 
                        img: "" 
                    },
                    { 
                        sub: "● ห้ามใช้บัญชีที่มีข้อมูลเข้าสู่ระบบเริ่มต้น (Default Credentials) โดยเฉพาะสำหรับบัญชี ผู้ดูแลระบบ (Admin)", 
                        img: "" 
                    },
                    { 
                        sub: "● ตรวจสอบความแข็งแกร่งของรหัสผ่าน โดยให้ตรวจสอบรหัสผ่านใหม่หรือที่เปลี่ยนแปลงกับ รายการรหัสผ่านที่แย่ที่สุด 10,000 อันดับแรก", 
                        img: "" 
                    },
                    { 
                        sub: "● ตั้งค่าความยาว, ความซับซ้อน, และนโยบายเปลี่ยนรหัสผ่านให้สอดคล้องกับมาตรฐานของ NIST 800-63b (ดูหัวข้อ Memorized Secrets - Section 5.1.1) หรือใช้แนวทางที่อ้างอิงจากหลักฐานที่ทันสมัย", 
                        img: "" 
                    },
                    { 
                        sub: "● ป้องกันการเปิดเผยข้อมูลบัญชีผ่านฟีเจอร์สมัครสมาชิก, กู้คืนรหัสผ่าน, และ API โดยแสดงข้อความที่เหมือนกันสำหรับทุกผลลัพธ์เพื่อป้องกันการโจมตีแบบ Account Enumeration", 
                        img: "" 
                    },
                    { 
                        sub: "● จำกัดหรือเพิ่มระยะเวลาหน่วงเมื่อล็อกอินล้มเหลว เพื่อป้องกัน Brute Force แต่ต้องระวังไม่ให้เกิด Denial of Service (DoS) พร้อมกับบันทึกทุกความล้มเหลวและแจ้งเตือนผู้ดูแลระบบหากพบพฤติกรรมโจมตี", 
                        img: "" 
                    },
                    { 
                        sub: "● ใช้ระบบจัดการเซสชันที่ปลอดภัย (Secure Session Manager) บนเซิร์ฟเวอร์ ที่สามารถ: สร้าง Session ID ใหม่ที่มีความซับซ้อนสูง, ห้ามใส่ Session ID ใน URL (เช่น ?sessionid=123456), จัดเก็บ Session ID อย่างปลอดภัย, ทำให้เซสชันหมดอายุเมื่อออกจากระบบ (Logout), ไม่ได้ใช้งานเป็นเวลานาน (Idle Timeout), หรือครบกำหนดอายุสูงสุด (Absolute Timeout)", 
                        img: "" 
                    },
                    
                ],
                ExampleAttackScenarios: [
                    { 
                        sub: "สถานการณ์ที่ 1: Credential Stuffing การโจมตีแบบ credential stuffing คือการใช้รายการรหัสผ่านที่รู้จักแล้วเพื่อพยายามเข้าสู่ระบบ ในกรณีที่แอปพลิเคชัน ไม่มีการป้องกันการโจมตีอัตโนมัติ หรือ ไม่มีการป้องกันการโจมตีแบบ credential stuffing แอปพลิเคชันนั้นสามารถถูกใช้เป็น 'password oracle' ซึ่งจะบอกผลว่า ข้อมูลเข้าสู่ระบบ (username, password) ที่ผู้โจมตีใช้ถูกต้องหรือไม่", 
                        img: "" 
                    },
                    { 
                        sub: "● ผลกระทบ: ผู้โจมตีสามารถใช้รายชื่อรหัสผ่านที่รู้จักแล้ว (เช่น รหัสผ่านที่หลุดจากการโจมตีในอดีต) เพื่อพยายามเข้าสู่ระบบของผู้ใช้หลาย ๆ คน จนในที่สุดสามารถเข้าถึงบัญชีของผู้ใช้ได้", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 2: การใช้รหัสผ่านเป็นปัจจัยเดียว การที่ยังคงใช้รหัสผ่านเป็นปัจจัยเดียวในการยืนยันตัวตน ทำให้เกิดช่องโหว่มากมาย โดยเฉพาะเมื่อมีการบังคับใช้ การหมุนเวียนรหัสผ่าน หรือ ความซับซ้อนของรหัสผ่าน ซึ่งทำให้ผู้ใช้ เลือกใช้รหัสผ่านที่อ่อนแอ หรือใช้รหัสผ่านเดิมซ้ำไปซ้ำมา", 
                        img: "" 
                    },
                    { 
                        sub: "● ผลกระทบ: หากองค์กรยังคงยึดแนวทางเดิมที่ให้ผู้ใช้ เปลี่ยนรหัสผ่านบ่อย ๆ และบังคับใช้ความซับซ้อนมากเกินไป จะทำให้ผู้ใช้เลือกใช้รหัสผ่านที่ง่ายและปลอดภัยน้อยลง เช่น การใช้รหัสผ่านที่คาดเดาได้ง่าย หรือใช้รหัสผ่านเดิมซ้ำๆ", 
                        img: "" 
                    },
                    { 
                        sub: "● แนวทางแก้ไข: ตามแนวทางของ NIST 800-63 แนะนำให้เลิกใช้การหมุนเวียนรหัสผ่านและหันมาใช้ การยืนยันตัวตนแบบหลายขั้นตอน (Multi-Factor Authentication - MFA) ซึ่งจะเพิ่มความปลอดภัยมากขึ้น", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 3: ปัญหาการตั้งเวลาหมดอายุของเซสชันผู้ใช้ที่ เข้าถึงแอปพลิเคชันจากคอมพิวเตอร์สาธารณะ และไม่ได้เลือก 'ออกจากระบบ' แต่ปิดแท็บเบราว์เซอร์แทน และ ทิ้งเครื่องไว้ โดยไม่ยกเลิกเซสชัน ผู้โจมตีที่เข้าถึงเครื่องหลังจากนั้นอาจจะสามารถ ใช้เบราว์เซอร์เดิม เพื่อเข้าสู่ระบบได้โดยไม่ต้องกรอกรหัสผ่านใหม่", 
                        img: "" 
                    },
                    { 
                        sub: "● ผลกระทบ: หากแอปพลิเคชัน ไม่ตั้งเวลาเซสชันหมดอายุ อย่างถูกต้อง (เช่น ไม่มีการกำหนดเวลา Idle Timeout หรือ Absolute Timeout) ผู้โจมตีอาจเข้าถึงบัญชีผู้ใช้โดยไม่ต้องยืนยันตัวตนอีกครั้ง", 
                        img: "" 
                    },
                    { 
                        sub: "● แนวทางแก้ไข: ควรตั้งค่า เวลาเซสชันหมดอายุ เมื่อผู้ใช้ไม่ได้ใช้งานเป็นเวลานาน หรือทำการออกจากระบบโดยอัตโนมัติหลังจากเวลาที่กำหนด", 
                        img: "" 
                    },
                    
                ]
        },
        {
            id: 8,
                description: [
                    { 
                        sub: "A08:2021 – Software and Data Integrity Failures", 
                        img: "" 
                    },
                    { 
                        sub: "การละเมิดความสมบูรณ์ของซอฟต์แวร์และข้อมูล เกี่ยวข้องกับโค้ดและโครงสร้างพื้นฐานที่ไม่ได้ป้องกันการละเมิดความสมบูรณ์ ข้อผิดพลาดในประเภทนี้อาจเกิดขึ้นได้จากหลายสาเหตุ เช่น:", 
                        img: "" 
                    },
                    { 
                        sub: "● การพึ่งพาปลั๊กอิน, ไลบรารี, หรือโมดูลจากแหล่งที่ไม่น่าเชื่อถือ: เมื่อแอปพลิเคชันใช้งานปลั๊กอินหรือโมดูลจากแหล่งที่ไม่ปลอดภัย เช่น แหล่งที่ไม่เชื่อถือ หรือ CDNs ที่ไม่ได้รับการตรวจสอบ อาจทำให้แอปพลิเคชันมีความเสี่ยงต่อการโจมตี เช่น การฝังโค้ดที่เป็นอันตราย", 
                        img: ""
                    },
                    { 
                        sub: "● ช่องโหว่ใน CI/CD pipeline: ในกรณีที่ CI/CD pipeline ไม่มีการป้องกันที่เพียงพอ อาจทำให้เกิดการเข้าถึงที่ไม่ได้รับอนุญาต หรือโค้ดที่เป็นอันตรายถูกนำเข้าสู่ระบบ ซึ่งอาจนำไปสู่ การละเมิดระบบ หรือการ บุกรุกระบบ", 
                        img: "" 
                    },
                    { 
                        sub: "● การอัปเดตอัตโนมัติที่ไม่มีการตรวจสอบความสมบูรณ์: หากแอปพลิเคชันมีฟังก์ชันการอัปเดตอัตโนมัติที่ดาวน์โหลดและติดตั้งการอัปเดตโดยที่ไม่มีการ ตรวจสอบความสมบูรณ์ อย่างเพียงพอ ผู้โจมตีอาจสามารถ อัปโหลดการอัปเดตของตนเอง เพื่อกระจายและรันบนการติดตั้งทั้งหมด ซึ่งอาจนำไปสู่ การแทรกแซงของซอฟต์แวร์", 
                        img: "" 
                    },
                    { 
                        sub: "● การดีซีเรียลไลซ์ (Deserialization) ที่ไม่ปลอดภัย: หากแอปพลิเคชันทำการ เข้ารหัสหรือดีซีเรียลไลซ์ข้อมูล โดยที่โครงสร้างข้อมูลสามารถถูกดูหรือแก้ไขโดยผู้โจมตีได้ จะทำให้เกิดช่องโหว่ที่สามารถใช้ประโยชน์จากการ ดีซีเรียลไลซ์ที่ไม่ปลอดภัย ซึ่งสามารถนำไปสู่การ แทรกโค้ดที่เป็นอันตราย หรือการเปลี่ยนแปลงข้อมูลที่สำคัญได้", 
                        img: "" 
                    },
                    
                ],
                HowtoPrevent: [
                    { 
                        sub: "ใช้ลายเซ็นดิจิทัล (Digital Signatures)", 
                        img: "" 
                    },
                    { 
                        sub: "● ใช้ลายเซ็นดิจิทัลหรือกลไกที่คล้ายกันเพื่อ ยืนยันว่า ซอฟต์แวร์หรือข้อมูลมาจากแหล่งที่เชื่อถือได้ และ ไม่ได้ถูกเปลี่ยนแปลง โดยการตรวจสอบความสมบูรณ์ของข้อมูลในทุกขั้นตอน", 
                        img: "" 
                    },
                    { 
                        sub: "ตรวจสอบไลบรารีและการพึ่งพา (Libraries and Dependencies) ", 
                        img: "" 
                    },
                    { 
                        sub: "● ตรวจสอบว่าไลบรารีและการพึ่งพาที่ใช้งาน เช่น npm หรือ Maven ถูกดึงมาจาก แหล่งที่เชื่อถือได้ หากระบบมีความเสี่ยงสูง ควรพิจารณาการ ตั้งค่าฐานข้อมูลภายใน ที่เป็นที่รู้จักและได้รับการตรวจสอบแล้ว", 
                        img: "" 
                    },
                    { 
                        sub: "ใช้เครื่องมือความปลอดภัยในซอฟต์แวร์ซัพพลายเชน (Software Supply Chain Security Tools)", 
                        img: "" 
                    },
                    { 
                        sub: "● ใช้เครื่องมือความปลอดภัยในซอฟต์แวร์ซัพพลายเชน เช่น OWASP Dependency Check หรือ OWASP CycloneDX เพื่อ ตรวจสอบว่าคอมโพเนนต์ต่าง ๆ ไม่มีช่องโหว่ที่รู้จัก", 
                        img: "" 
                    },
                    { 
                        sub: "กระบวนการตรวจสอบการเปลี่ยนแปลงโค้ดและการตั้งค่า (Code and Configuration Review Process)", 
                        img: "" 
                    },
                    { 
                        sub: "● มี กระบวนการตรวจสอบโค้ดและการตั้งค่าที่เปลี่ยนแปลง เพื่อ ลดโอกาสที่โค้ดหรือการตั้งค่าที่เป็นอันตราย จะถูกนำเข้าสู่สายงานซอฟต์แวร์ของคุณ", 
                        img: "" 
                    },
                    { 
                        sub: "การควบคุมและแยกสิทธิ์ใน CI/CD Pipeline", 
                        img: "" 
                    },
                    { 
                        sub: "● ตรวจสอบให้แน่ใจว่า CI/CD pipeline มีการแยกแยะสิทธิ์การเข้าถึงและการตั้งค่าที่เหมาะสม เพื่อ รักษาความสมบูรณ์ของโค้ด ที่ไหลผ่านกระบวนการการสร้างและการติดตั้ง", 
                        img: "" 
                    },
                    { 
                        sub: "การตรวจสอบข้อมูลที่ไม่ได้เข้ารหัสหรือไม่ได้ลงลายเซ็น (Unsigned or Unencrypted Data)", 
                        img: "" 
                    },
                    { 
                        sub: "● อย่าส่ง ข้อมูลที่ไม่ได้ลงลายเซ็นหรือเข้ารหัส ไปยัง ลูกค้าที่ไม่น่าเชื่อถือ โดยไม่มีการตรวจสอบความสมบูรณ์หรือ ลายเซ็นดิจิทัล เพื่อตรวจจับการดัดแปลงหรือการเรียกข้อมูลซ้ำ (Replay) ของข้อมูลที่ถูกส่ง", 
                        img: "" 
                    },
                ],
                ExampleAttackScenarios: [
                    { 
                        sub: "สถานการณ์ที่ 1: การอัปเดตโดยไม่มีการลงลายเซ็น (Update Without Signing) หลายอุปกรณ์ เช่น เราเตอร์ที่บ้าน, กล่องเซ็ตท็อปบ็อกซ์, เฟิร์มแวร์ของอุปกรณ์ และอื่น ๆ มักจะ ไม่ตรวจสอบความสมบูรณ์ของการอัปเดต ผ่าน ลายเซ็นดิจิทัล ซึ่งเป็นช่องทางที่ผู้โจมตีใช้ในการโจมตีอย่างมาก โดยการอัปเดตเฟิร์มแวร์ที่ไม่ได้ลงลายเซ็นจะทำให้ผู้โจมตีสามารถแทรกโค้ดที่เป็นอันตรายได้ โดยปัญหานี้มักจะไม่สามารถแก้ไขได้ทันที ต้องรอให้เวอร์ชันใหม่ออกมาและค่อย ๆ แทนที่เวอร์ชันเก่าที่เสี่ยงภัย", 
                        img: "" 
                    },
                    { 
                        sub: "● ผลกระทบ: ผู้โจมตีสามารถอัปโหลดเฟิร์มแวร์ที่เป็นอันตรายและกระจายไปยังอุปกรณ์ต่าง ๆ ซึ่งทำให้ผู้ใช้งานเสี่ยงต่อการถูกโจมตี", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 2: การโจมตีการอัปเดต SolarWinds (SolarWinds Malicious Update)หนึ่งในการโจมตีที่โด่งดังที่สุดในช่วงเวลาที่ผ่านมา คือการ โจมตี SolarWinds Orion โดยมีการโจมตีที่มุ่งเป้าไปที่ กระบวนการอัปเดตซอฟต์แวร์ ซึ่งแม้ว่าบริษัท SolarWinds จะมี กระบวนการสร้างและอัปเดตที่ปลอดภัย แต่ระบบเหล่านั้นสามารถถูก แทรกแซง และ ถูกใช้เพื่อกระจายการอัปเดตที่เป็นอันตราย ไปยังองค์กรมากกว่า 18,000 แห่ง ทำให้บริษัทหรือหน่วยงานที่ถูกโจมตีจำนวนหนึ่งได้รับผลกระทบหนัก", 
                        img: "" 
                    },
                    { 
                        sub: "● ผลกระทบ: การโจมตีนี้ทำให้ระบบของบริษัทหลายพันแห่งได้รับการอัปเดตที่มีโค้ดอันตรายและสามารถทำให้ผู้โจมตีเข้าถึงข้อมูลสำคัญได้", 
                        img: "" 
                    },
                    
                ]
        },
        {
            id: 9,
                description: [
                    { 
                        sub: "A09:2021 – Security Logging and Monitoring Failures", 
                        img: "" 
                    },
                    { 
                        sub: "การตรวจจับและตอบสนองการละเมิดที่ใช้งานอยู่ (Active Breach Detection and Response) เป็นการรับมือกับการละเมิดที่เกิดขึ้นในแอปพลิเคชัน โดยการมีระบบ การบันทึกข้อมูล (Logging) และ การตรวจสอบ (Monitoring) ที่ดี เพื่อช่วยในการตรวจจับ, เพิ่มระดับความรุนแรง, และตอบสนองต่อการละเมิดที่เกิดขึ้น โดยถ้าแอปพลิเคชันไม่มีการบันทึกและตรวจสอบที่เพียงพอ อาจจะทำให้ไม่สามารถตรวจจับการละเมิดได้ ตัวอย่างการละเมิดที่เกิดขึ้นได้จากการขาดการบันทึกและตรวจสอบมีดังนี้:", 
                        img: "" 
                    },
                    { 
                        sub: "● เหตุการณ์ที่สามารถตรวจสอบได้ เช่น การเข้าสู่ระบบ, การเข้าสู่ระบบที่ล้มเหลว, หรือ ธุรกรรมที่มีมูลค่าสูง ไม่ได้ถูกบันทึก", 
                        img: ""
                    },
                    { 
                        sub: "● คำเตือนและข้อผิดพลาด ไม่ได้สร้างข้อความบันทึกที่เหมาะสม หรือ ข้อความบันทึกไม่ชัดเจน", 
                        img: "" 
                    },
                    { 
                        sub: "● การบันทึกของแอปพลิเคชันและ API ไม่ได้ถูกตรวจสอบ เพื่อหากิจกรรมที่น่าสงสัย", 
                        img: "" 
                    },
                    { 
                        sub: "● การบันทึกถูกเก็บไว้เฉพาะในเครื่องท้องถิ่น โดยไม่มีการสำรองหรือตรวจสอบจากที่อื่น", 
                        img: "" 
                    },
                    { 
                        sub: "● การแจ้งเตือน หรือ การตั้งเกณฑ์การแจ้งเตือน ไม่เหมาะสม หรือ กระบวนการตอบสนองไม่เพียงพอ", 
                        img: "" 
                    },
                    { 
                        sub: "● การทดสอบเจาะระบบ (Penetration Testing) หรือ การสแกนด้วยเครื่องมือ DAST (เช่น OWASP ZAP) ไม่ทำให้เกิดการแจ้งเตือน", 
                        img: "" 
                    },
                    { 
                        sub: "● แอปพลิเคชันไม่สามารถตรวจจับ, เพิ่มระดับความรุนแรง, หรือ แจ้งเตือนเกี่ยวกับการโจมตีที่เกิดขึ้นจริง หรือการโจมตีที่เกือบจะเกิดขึ้นในเวลาจริงหรือใกล้เคียงเวลาจริง", 
                        img: "" 
                    },
                    { 
                        sub: "● แอปพลิเคชันอาจมีช่องโหว่การรั่วไหลของข้อมูล หาก การบันทึกและการแจ้งเตือนถูกเปิดเผย ให้กับผู้ใช้หรือผู้โจมตี (ดู A01:2021-Broken Access Control)", 
                        img: "" 
                    },
                    
                ],
                HowtoPrevent: [
                    { 
                        sub: "นักพัฒนาควรใช้มาตรการดังต่อไปนี้เพื่อป้องกันการละเมิดที่เกิดขึ้น โดยการเลือกใช้มาตรการที่เหมาะสมตามความเสี่ยงของแอปพลิเคชัน:", 
                        img: "" 
                    },
                    { 
                        sub: "● บันทึกเหตุการณ์ที่สำคัญ ตรวจสอบให้แน่ใจว่าเหตุการณ์การเข้าสู่ระบบ, การควบคุมการเข้าถึง, และการตรวจสอบความถูกต้องของข้อมูลฝั่งเซิร์ฟเวอร์ที่ล้มเหลวสามารถ บันทึก ได้พร้อมกับ ข้อมูลผู้ใช้ที่เพียงพอ เพื่อช่วยในการ ระบุบัญชีที่สงสัยหรือเป็นอันตราย และเก็บข้อมูลเหล่านี้ไว้ในช่วงเวลาที่พอเพียงเพื่อให้สามารถทำการวิเคราะห์ทางนิติเวชได้ในภายหลัง", 
                        img: "" 
                    },
                    { 
                        sub: "● จัดรูปแบบการบันทึกที่เข้ากันได้กับเครื่องมือการจัดการบันทึก มั่นใจว่า ข้อมูลบันทึก ถูกสร้างในรูปแบบที่เครื่องมือการจัดการบันทึกสามารถ นำไปใช้งานได้ง่าย เช่นการใช้ฟอร์แมตที่เป็นมาตรฐาน ", 
                        img: "" 
                    },
                    { 
                        sub: "● การเข้ารหัสข้อมูลบันทึกเพื่อป้องกันการโจมตี ตรวจสอบให้แน่ใจว่า ข้อมูลบันทึก ถูกเข้ารหัสอย่างถูกต้อง เพื่อป้องกันการโจมตีหรือการ แทรกซึม ระบบการบันทึกหรือการตรวจสอบ", 
                        img: "" 
                    },
                    { 
                        sub: "● สร้าง Audit Trail สำหรับธุรกรรมที่มีมูลค่าสูง ตรวจสอบให้แน่ใจว่า ธุรกรรมที่มีมูลค่าสูง มี เส้นทางการตรวจสอบ (Audit Trail) ที่มีการควบคุมความสมบูรณ์ เช่น การใช้ ตารางฐานข้อมูลที่สามารถเพิ่มข้อมูลได้เท่านั้น หรือการควบคุมที่คล้ายกัน เพื่อป้องกันการ ดัดแปลงหรือลบข้อมูล", 
                        img: "" 
                    },
                    { 
                        sub: "● ทีม DevSecOps ควรตั้งระบบตรวจสอบและการแจ้งเตือนที่มีประสิทธิภาพ สร้าง ระบบการตรวจสอบ และ การแจ้งเตือน เพื่อให้สามารถตรวจจับกิจกรรมที่น่าสงสัยและตอบสนองได้อย่างรวดเร็ว", 
                        img: "" 
                    },
                    { 
                        sub: "● ตั้งแผนตอบสนองเหตุการณ์และการกู้คืน สร้างหรือ นำแผนตอบสนองต่อเหตุการณ์ (Incident Response) และการกู้คืน (Recovery Plan) มาใช้ เช่นการปฏิบัติตาม NIST 800-61r2 หรือเวอร์ชันที่ใหม่กว่า เพื่อให้สามารถรับมือกับเหตุการณ์การละเมิดได้อย่างมีประสิทธิภาพ", 
                        img: "" 
                    },
                    { 
                        sub: "● ใช้เฟรมเวิร์กการปกป้องแอปพลิเคชันและเครื่องมือการเชื่อมโยงบันทึกใช้ OWASP ModSecurity Core Rule Set หรือเครื่องมือโอเพ่นซอร์สเช่น Elasticsearch, Logstash, Kibana (ELK) stack ที่มี แดชบอร์ดที่ปรับแต่งได้ และ ระบบการแจ้งเตือน เพื่อช่วยในการตรวจจับและตอบสนองต่อเหตุการณ์ที่น่าสงสัย", 
                        img: "" 
                    },
                ],
                ExampleAttackScenarios: [
                    { 
                        sub: "สถานการณ์ที่ 1: ผู้ให้บริการแผนสุขภาพเด็กไม่ได้ตรวจจับการละเมิดเนื่องจากขาดการตรวจสอบและการบันทึก ผู้ดูแลเว็บไซต์ของผู้ให้บริการแผนสุขภาพเด็กไม่สามารถตรวจจับการละเมิดที่เกิดขึ้นได้เนื่องจาก ไม่มีการตรวจสอบและการบันทึกข้อมูล ซึ่งภายหลังพบว่า ผู้โจมตีได้เข้าถึงและดัดแปลงข้อมูลสุขภาพที่สำคัญ ของเด็กมากกว่า 3.5 ล้านคน การทบทวนหลังเหตุการณ์เผยว่า นักพัฒนาเว็บไซต์ไม่ได้แก้ไขช่องโหว่ที่สำคัญ และเนื่องจากไม่มีการบันทึกหรือการตรวจสอบระบบ จึงเป็นไปได้ว่าการละเมิดข้อมูลนั้นอาจเกิดขึ้นมานานตั้งแต่ปี 2013 หรือเกือบ เจ็ดปีที่ข้อมูลถูกละเมิดโดยไม่ถูกตรวจจับ", 
                        img: "" 
                    },
                    { 
                        sub: "● ผลกระทบ: การละเมิดข้อมูลที่รุนแรง ซึ่งรวมถึงข้อมูลส่วนบุคคลที่มีความสำคัญของเด็กจำนวนมาก แต่ไม่ได้รับการตรวจจับหรือแก้ไขเป็นเวลาหลายปี", 
                        img: "" 
                    },
                    { 
                        sub: "สายการบินใหญ่ในอินเดียเกิดการละเมิดข้อมูลส่วนบุคคลของผู้โดยสารมากกว่าสิบปี สายการบินใหญ่ในอินเดียเกิด การละเมิดข้อมูลส่วนบุคคล ที่เกี่ยวข้องกับข้อมูลผู้โดยสารหลายล้านคน ซึ่งรวมถึงข้อมูลบัตรเครดิตและพาสปอร์ต การละเมิดนี้เกิดขึ้นที่ ผู้ให้บริการคลาวด์ของบุคคลที่สาม ซึ่งหลังจากนั้นได้แจ้งสายการบินถึงการละเมิด แต่เมื่อการละเมิดเกิดขึ้นแล้ว ไม่สามารถป้องกันหรือตรวจจับได้ในทันที", 
                        img: "" 
                    },
                    { 
                        sub: "● ผลกระทบ: ข้อมูลส่วนบุคคลที่สำคัญของผู้โดยสารถูกเปิดเผยและสายการบินไม่ได้รับการแจ้งเตือนในทันทีเมื่อการละเมิดเกิดขึ้น", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 2: สายการบินใหญ่ในยุโรปประสบการละเมิดข้อมูลที่ต้องรายงานตาม GDPR สายการบินใหญ่ในยุโรปต้องรายงานการละเมิดข้อมูลที่เกิดขึ้น ซึ่งการละเมิดนี้เกิดจาก ช่องโหว่ด้านความปลอดภัยในแอปพลิเคชันการชำระเงิน ที่ถูก ผู้โจมตีใช้ประโยชน์ ทำให้ข้อมูลการชำระเงินของลูกค้ากว่า 400,000 รายถูกขโมยไป สายการบินถูก ปรับเป็นเงิน 20 ล้านปอนด์ จากหน่วยงานกำกับดูแลด้านความเป็นส่วนตัว", 
                        img: "" 
                    },
                    { 
                        sub: "● ผลกระทบ: การละเมิดข้อมูลที่สำคัญของลูกค้าจำนวนมากและผลกระทบทางการเงินจากการถูกปรับตามกฎระเบียบของ GDPR", 
                        img: "" 
                    },
                    
                ]
        },
        {
            id: 10,
                description: [
                    { 
                        sub: "A10:2021 – Server-Side Request Forgery (SSRF)", 
                        img: "" 
                    },
                    { 
                        sub: "ข้อบกพร่อง SSRF (Server-Side Request Forgery)", 
                        img: "" 
                    },
                    { 
                        sub: "● SSRF คือข้อบกพร่องที่เกิดขึ้นเมื่อแอปพลิเคชันเว็บทำการดึงข้อมูลจากแหล่งข้อมูลภายนอกโดยไม่ตรวจสอบ URL ที่ผู้ใช้ระบุ ซึ่งทำให้ผู้โจมตีสามารถบังคับให้แอปพลิเคชันส่งคำขอที่ถูกปรับแต่งไปยังปลายทางที่ไม่คาดคิดได้ แม้ว่าระบบจะได้รับการป้องกันด้วย ไฟร์วอลล์, VPN, หรือ รายการควบคุมการเข้าถึงเครือข่าย (ACL) ก็ตาม", 
                        img: ""
                    },
                    { 
                        sub: "เหตุผลที่ SSRF เกิดขึ้น:", 
                        img: "" 
                    },
                    { 
                        sub: "● การดึงข้อมูล URL เป็นฟีเจอร์ที่พบได้บ่อยในแอปพลิเคชันเว็บสมัยใหม่ ซึ่งผู้ใช้สามารถให้ URL ของแหล่งข้อมูลภายนอกเพื่อให้แอปพลิเคชันดึงข้อมูลเหล่านั้นมาใช้งาน", 
                        img: "" 
                    },
                    { 
                        sub: "● มื่อแอปพลิเคชันไม่ตรวจสอบหรือกรอง URL ที่ผู้ใช้ให้มาอย่างเหมาะสม, ผู้โจมตีสามารถระบุ URL ที่ไปยังแหล่งข้อมูลที่ไม่คาดคิดหรือเซิร์ฟเวอร์ที่อยู่นอกการควบคุมได้", 
                        img: "" 
                    },
                    { 
                        sub: "● การโจมตี SSRF สามารถทำให้ผู้โจมตีเข้าถึง บริการภายใน ที่อาจจะถูกป้องกันจากภายนอกโดยใช้ไฟร์วอลล์หรือการควบคุมการเข้าถึงเครือข่าย", 
                        img: "" 
                    },
                    { 
                        sub: "การเพิ่มขึ้นของความเสี่ยงจาก SSRF", 
                        img: "" 
                    },
                    { 
                        sub: "● การใช้งานบริการคลาวด์: บริการคลาวด์สมัยใหม่ที่มี แอปพลิเคชันหลายชั้น และการตั้งค่าที่ซับซ้อน ทำให้ ช่องโหว่ SSRF เป็นอันตรายมากขึ้น เนื่องจากผู้โจมตีสามารถข้ามการป้องกันที่เครือข่ายหรือระบบภายนอกได้", 
                        img: "" 
                    },
                    { 
                        sub: "● การใช้งาน URL ภายใน: ในบางกรณี ผู้โจมตีอาจใช้ SSRF เพื่อเข้าถึงบริการภายในที่ไม่สามารถเข้าถึงได้จากภายนอก เช่น เมตาดาต้าของคลาวด์ หรือ API ภายใน ที่เปิดให้บริการเฉพาะกับแอปพลิเคชันที่เชื่อถือได้", 
                        img: "" 
                    },
                ],
                HowtoPrevent: [
                    { 
                        sub: "การป้องกัน SSRF สามารถทำได้โดยการใช้มาตรการป้องกันหลายชั้น (defense in depth) ดังนี้:", 
                        img: "" 
                    },
                    { 
                        sub: "จากชั้นเครือข่าย (Network Layer):", 
                        img: "" 
                    },
                    { 
                        sub: "● แยกฟังก์ชันการเข้าถึงแหล่งข้อมูลภายนอก ให้เป็นเครือข่ายแยกต่างหากเพื่อจำกัดผลกระทบของ SSRF", 
                        img: "" 
                    },
                    { 
                        sub: "● บังคับใช้กฎไฟร์วอลล์ “deny by default” หรือ กฎการควบคุมการเข้าถึงเครือข่าย เพื่อบล็อกการเข้าถึงเครือข่ายภายในที่ไม่จำเป็น", 
                        img: "" 
                    },
                    { 
                        sub: "จากชั้นแอปพลิเคชัน (Application Layer): ", 
                        img: "" 
                    },
                    { 
                        sub: "● ทำความสะอาดและตรวจสอบข้อมูลที่ผู้ใช้ส่งมา เช่น URL และข้อมูลที่เกี่ยวข้อง", 
                        img: "" 
                    },
                    { 
                        sub: "● บังคับใช้ข้อกำหนดเกี่ยวกับ schema ของ URL, พอร์ต, และปลายทาง โดยใช้ allow list ที่ยอมรับเพียงแหล่งที่เชื่อถือได้", 
                        img: "" 
                    },
                    { 
                        sub: "● อย่าส่งการตอบกลับดิบ (raw responses) ไปยังผู้ใช้", 
                        img: "" 
                    },
                    { 
                        sub: "● ปิดใช้งานการเปลี่ยนเส้นทาง HTTP เพื่อลดโอกาสในการถูกโจมตี", 
                        img: "" 
                    },
                    { 
                        sub: "● ตรวจสอบความสอดคล้องของ URL เพื่อหลีกเลี่ยงการโจมตีเช่น DNS rebinding และ “time of check, time of use” (TOCTOU) race conditions", 
                        img: "" 
                    },
                    { 
                        sub: "● อย่าใช้ deny list หรือ regular expression เพื่อป้องกัน SSRF เพราะผู้โจมตีอาจมีเครื่องมือหรือรายการ payload ที่สามารถหลีกเลี่ยง deny list ได้", 
                        img: "" 
                    },
                    { 
                        sub: "มาตรการเพิ่มเติมที่ควรพิจารณา:", 
                        img: "" 
                    },
                    { 
                        sub: "● อย่าติดตั้งบริการที่สำคัญด้านความปลอดภัยบนระบบหน้าหรือฟรอนท์เอนด์ (เช่น OpenID) เพื่อป้องกันไม่ให้ระบบเหล่านี้ถูกโจมตี", 
                        img: "" 
                    },
                    { 
                        sub: "● ควบคุมการจราจรในท้องถิ่น (local traffic) บนระบบเหล่านี้ (เช่น localhost) เพื่อป้องกันการเข้าถึงจากแหล่งที่ไม่เชื่อถือ", 
                        img: "" 
                    },
                    { 
                        sub: "● สำหรับ ฟรอนท์เอนด์ที่มีผู้ใช้งานเฉพาะกลุ่มและจัดการได้ ควรใช้ การเข้ารหัสเครือข่าย (เช่น VPNs) บนอุปกรณ์ที่แยกออกมาเพื่อเพิ่มระดับการป้องกันที่สูงขึ้น", 
                        img: "" 
                    },
                ],
                ExampleAttackScenarios: [
                    { 
                        sub: "ผู้โจมตีสามารถใช้ SSRF เพื่อโจมตีระบบที่ได้รับการป้องกันจาก เว็บแอปพลิเคชันไฟร์วอลล์, ไฟร์วอลล์, หรือ ACL ของเครือข่าย โดยใช้กรณีต่างๆ เช่น:", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 1: การสแกนพอร์ตในเซิร์ฟเวอร์ภายใน", 
                        img: "" 
                    },
                    { 
                        sub: "● หากสถาปัตยกรรมเครือข่ายไม่มีการแยกส่วน (uns segmented), ผู้โจมตีสามารถใช้ SSRF เพื่อทำการสแกนพอร์ตในเซิร์ฟเวอร์ภายในได้ โดยดูจากผลการเชื่อมต่อหรือเวลาที่ใช้ในการเชื่อมต่อหรือปฏิเสธการเชื่อมต่อของการส่งพ่วง (payload) SSRF", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 2: การเปิดเผยข้อมูลที่ละเอียดอ่อน", 
                        img: "" 
                    },
                    { 
                        sub: "● ผู้โจมตีสามารถเข้าถึงไฟล์ภายในหรือบริการภายในเพื่อดึงข้อมูลที่ละเอียดอ่อน เช่น การเข้าถึงไฟล์ file:///etc/passwd หรือ http://localhost:28017/ ซึ่งอาจเปิดเผยข้อมูลที่สำคัญ", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 3: การเข้าถึงข้อมูลเมตาของบริการคลาวด์", 
                        img: "" 
                    },
                    { 
                        sub: "● ผู้โจมตีสามารถเข้าถึง metadata storage ของผู้ให้บริการคลาวด์ที่มักจะอยู่ที่ http://169.254.169.254/ ซึ่งจะให้ข้อมูลที่ละเอียดอ่อน เช่น คีย์และข้อมูลการเข้าถึง", 
                        img: "" 
                    },
                    { 
                        sub: "สถานการณ์ที่ 4: การโจมตีบริการภายใน", 
                        img: "" 
                    },
                    { 
                        sub: "● ผู้โจมตีสามารถใช้บริการภายในเพื่อทำการโจมตีเพิ่มเติม เช่น การใช้ Remote Code Execution (RCE) หรือ Denial of Service (DoS) เพื่อทำให้ระบบภายในถูกโจมตีและอาจเกิดความเสียหายร้ายแรง", 
                        img: "" 
                    },
                    { 
                        sub: "การโจมตีเหล่านี้แสดงให้เห็นถึงความเสี่ยงของ SSRF ที่สามารถเข้าถึงทรัพยากรภายในที่มีการป้องกันอย่างรุนแรง เช่น บริการคลาวด์หรือระบบที่มีข้อมูลละเอียดอ่อน โดยเฉพาะเมื่อการตั้งค่าระบบเครือข่ายไม่ได้มีการป้องกันอย่างเข้มงวด.", 
                        img: "" 
                    },
                    
                ]
        },


];

// getAll API
const getAll = (req, res) => {
    return res.status(200).json({
        topic_detail: data
    });
};

// getById API
const getById = (req, res) => {
    const { id } = req.params;
    const topic = data.find(item => item.id === parseInt(id));

    if (!topic) {
        return res.status(404).json({ message: "Topic not found" });
    }

    return res.status(200).json({
        topic_detail: [topic]
    });
};

module.exports = {
    getAll,
    getById
};
