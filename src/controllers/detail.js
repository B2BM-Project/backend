// Mock data
const data = [
    {
        id: 1,
        title: "A01:2021 – Broken Access Control",
        description: [
            { 
                sub: "Access Control บังคับใช้นโยบายเพื่อป้องกันไม่ให้ผู้ใช้งานดำเนินการนอกเหนือจากสิทธิ์ที่ตั้งใจไว้ ความล้มเหลวใน Access Control มักนำไปสู่การเปิดเผยข้อมูลที่ไม่ได้รับอนุญาต การแก้ไขหรือทำลายข้อมูลทั้งหมด หรือการดำเนินการทางธุรกิจที่เกินขอบเขตของผู้ใช้ ตัวอย่างของช่องโหว่ใน Access Control ที่พบบ่อย ได้แก่:", 
                img: "" 
            },
            { 
                sub: "การละเมิดหลักการสิทธิ์น้อยที่สุด (Principle of Least Privilege) หรือการตั้งค่า 'ปฏิเสธเป็นค่าเริ่มต้น' (Deny by Default) โดยที่สิทธิ์การเข้าถึงควรถูกกำหนดเฉพาะให้กับความสามารถ บทบาท หรือผู้ใช้ที่ต้องการ แต่กลับเปิดให้ทุกคนเข้าถึงได้", 
                img: "" 
            },
            { 
                sub: "การข้ามการตรวจสอบ Access Control โดยการปรับเปลี่ยน URL (เช่น การดัดแปลงพารามิเตอร์หรือลัดไปยังหน้าโดยไม่ได้รับอนุญาต) สถานะภายในของแอปพลิเคชัน หรือหน้า HTML รวมถึงการใช้เครื่องมือโจมตีเพื่อปรับเปลี่ยนคำขอ API", 
                img: "" 
            },
            { 
                sub: "การอนุญาตให้ดูหรือแก้ไขบัญชีของผู้อื่นได้ โดยการให้ตัวระบุเฉพาะของบัญชี (Insecure Direct Object References)", 
                img: "" 
            },
            { 
                sub: "การเข้าถึง API โดยไม่มีการควบคุมสิทธิ์สำหรับคำขอประเภท POST, PUT และ DELETE", 
                img: "" 
            },
            { 
                sub: "การยกระดับสิทธิ์ (Privilege Escalation) เช่น การกระทำในฐานะผู้ใช้โดยไม่ได้เข้าสู่ระบบ หรือการกระทำในฐานะผู้ดูแลระบบทั้งที่เข้าสู่ระบบในฐานะผู้ใช้ทั่วไป", 
                img: "" 
            },
            { 
                sub: "การจัดการ Metadata เช่น การเล่นซ้ำหรือปรับแต่ง JSON Web Token (JWT) สำหรับ Access Control Token หรือการปรับเปลี่ยนคุกกี้หรือตัวแปรซ่อนเพื่อต้องการยกระดับสิทธิ์ หรือการใช้ช่องโหว่ในการทำให้ JWT ไม่ถูกต้อง", 
                img: "" 
            },
            { 
                sub: "การตั้งค่า CORS (Cross-Origin Resource Sharing) ที่ผิดพลาด ทำให้สามารถเข้าถึง API จากแหล่งที่มาที่ไม่ได้รับอนุญาตหรือไม่น่าเชื่อถือ", 
                img: "" 
            },
            { 
                sub: "การลัดผ่านไปยังหน้าที่ต้องเข้าสู่ระบบในฐานะผู้ใช้ที่ไม่ได้เข้าสู่ระบบ หรือเข้าถึงหน้าที่มีสิทธิพิเศษในฐานะผู้ใช้ทั่วไป", 
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "การควบคุมการเข้าถึง (Access Control) จะมีประสิทธิภาพเมื่อใช้งานในโค้ดฝั่งเซิร์ฟเวอร์ที่เชื่อถือได้ หรือ API ที่ไม่มีเซิร์ฟเวอร์ ซึ่งผู้โจมตีไม่สามารถปรับเปลี่ยนการตรวจสอบหรือ Metadata ของการควบคุมการเข้าถึงได้", 
                img: "" 
            },
            { 
                sub: "ยกเว้นทรัพยากรสาธารณะ ควรกำหนดการปฏิเสธเป็นค่าเริ่มต้น (Deny by Default)", 
                img: "" 
            },
            { 
                sub: "ใช้กลไกควบคุมการเข้าถึงเพียงครั้งเดียวและนำมาใช้ซ้ำในแอปพลิเคชัน รวมถึงลดการใช้งาน Cross-Origin Resource Sharing (CORS) ให้เหลือน้อยที่สุด", 
                img: "" 
            },
            { 
                sub: "การควบคุมการเข้าถึงตามโมเดลควรบังคับให้ตรวจสอบความเป็นเจ้าของข้อมูล แทนที่จะยอมให้ผู้ใช้สามารถสร้าง อ่าน แก้ไข หรือลบข้อมูลใดๆ ได้", 
                img: "" 
            },
            { 
                sub: "บังคับใช้งานข้อจำกัดทางธุรกิจเฉพาะของแอปพลิเคชันผ่านโมเดลโดเมน", 
                img: "" 
            },
            { 
                sub: "ปิดการแสดงรายชื่อไดเรกทอรีของเว็บเซิร์ฟเวอร์ และตรวจสอบให้แน่ใจว่าไม่มีไฟล์ Metadata (เช่น .git) และไฟล์สำรองข้อมูลอยู่ในโฟลเดอร์เว็บรูท", 
                img: "" 
            },
            { 
                sub: "บันทึกความล้มเหลวในการควบคุมการเข้าถึง และแจ้งเตือนผู้ดูแลระบบเมื่อเหมาะสม (เช่น เมื่อเกิดความล้มเหลวซ้ำๆ)", 
                img: "" 
            },
            { 
                sub: "จำกัดอัตราการเข้าถึง API และตัวควบคุม เพื่อจำกัดความเสียหายจากเครื่องมือโจมตีอัตโนมัติ", 
                img: "" 
            },
            { 
                sub: "ระบุ Session Identifier ที่มีสถานะควรถูกทำให้ไม่สามารถใช้งานได้บนเซิร์ฟเวอร์หลังการออกจากระบบ ส่วน JWT Token แบบไร้สถานะ ควรกำหนดอายุการใช้งานให้สั้นเพื่อลดโอกาสโจมตี และสำหรับ JWT ที่มีอายุการใช้งานยาว ควรปฏิบัติตามมาตรฐาน OAuth เพื่อเพิกถอนการเข้าถึง", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1:แอปพลิเคชันใช้ข้อมูลที่ไม่ได้รับการตรวจสอบในคำสั่ง SQL เพื่อเข้าถึงข้อมูลบัญชี:", 
                img: "https://65015017.gitlab.io/-/picture/-/jobs/8495694939/artifacts/public/1.png" 
            },
            { 
                sub: "ผู้โจมตีสามารถปรับเปลี่ยนพารามิเตอร์ acct ในเบราว์เซอร์เพื่อส่งหมายเลขบัญชีใดๆ ที่ต้องการได้ หากไม่มีการตรวจสอบข้อมูลอย่างเหมาะสม ผู้โจมตีสามารถเข้าถึงบัญชีของผู้ใช้รายอื่นได้", 
                img: "https://65015017.gitlab.io/-/picture/-/jobs/8495694939/artifacts/public/2.png" 
            },
            { 
                sub: "สถานการณ์ที่ 2:ผู้โจมตีทำการลัดผ่าน (Force Browsing) ไปยัง URL เป้าหมาย หน้าผู้ดูแลระบบต้องการสิทธิ์ Admin ในการเข้าถึง:", 
                img: "https://65015017.gitlab.io/-/picture/-/jobs/8495694939/artifacts/public/3.png" 
            },
            { 
                sub: "หากผู้ใช้ที่ไม่ได้รับการยืนยันตัวตนสามารถเข้าถึงหน้าใดหน้าหนึ่งได้ แสดงว่าเกิดช่องโหว่หากผู้ใช้ที่ไม่ใช่ Admin สามารถเข้าถึงหน้าผู้ดูแลระบบได้ ก็ถือว่าเป็นช่องโหว่เช่นกัน", 
                img: "" 
            },
            
        ]
    },
    {
        id: 2,
        title: "A02:2021 – Cryptographic Failures",
        description: [
            { 
                sub: "ตรวจสอบว่าข้อมูลที่ส่งผ่านเครือข่ายถูกเข้ารหัสหรือไม่ โดยหลีกเลี่ยงการใช้โปรโตคอลที่ไม่ปลอดภัย เช่น HTTP, FTP หรือ SMTP ที่ไม่มีการเข้ารหัส ข้อมูลที่ส่งแบบไม่ปลอดภัยอาจถูกดักจับโดยผู้ไม่หวังดี", 
                img: "" 
            },
            { 
                sub: "หลีกเลี่ยงการใช้อัลกอริทึมการเข้ารหัสหรือโปรโตคอลที่ล้าสมัย เช่น MD5, SHA-1 หรือ TLS เวอร์ชันเก่า ซึ่งมีความเสี่ยงที่จะถูกโจมตี ควรอัปเดตระบบให้ใช้อัลกอริทึมที่ทันสมัยและมีความปลอดภัย", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบการจัดการคีย์เข้ารหัส เช่น ห้ามใช้คีย์เริ่มต้นจากระบบเดิม ห้ามเก็บคีย์ใน Source Code หรือที่เก็บข้อมูลที่เข้าถึงได้ง่าย และควรมีการจัดการคีย์อย่างเหมาะสม เช่น การหมุนเวียนคีย์ตามรอบเวลา",
                img: "" 
            },
            { 
                sub: "บังคับใช้การเข้ารหัสในการรับส่งข้อมูลเสมอ เช่น การตั้งค่า HTTP Headers ที่ช่วยเพิ่มความปลอดภัย เช่น HSTS (Strict-Transport-Security) หรือ Content-Security-Policy",
                img: "" 
            },
            { 
                sub: "ตรวจสอบใบรับรองเซิร์ฟเวอร์ว่ามีความน่าเชื่อถือ โดยใบรับรองต้องผ่านการรับรองจากหน่วยงานที่เชื่อถือได้ (Trusted Certificate Authority) และมีการตรวจสอบโซ่ความน่าเชื่อถือ (Trust Chain) อย่างถูกต้อง",
                img: "" 
            },
            { 
                sub: "ใช้ IV (Initialization Vector) และข้อมูลสุ่มที่สร้างอย่างปลอดภัยและไม่ซ้ำกันในทุกการเข้ารหัส เพื่อป้องกันการโจมตีแบบคาดเดารูปแบบข้อมูล",
                img: "" 
            },
            { 
                sub: "หลีกเลี่ยงการใช้อัลกอริทึมแฮชหรือวิธีการเติมข้อมูลที่ล้าสมัย เช่น การใช้ MD5, SHA-1 หรือ Padding แบบ PKCS v1.5 ซึ่งอาจนำไปสู่การโจมตีที่สามารถคาดเดาข้อมูลได้",
                img: "" 
            },
            { 
                sub: "ระมัดระวังการแสดงข้อมูลหรือข้อความผิดพลาดที่อาจถูกใช้ในการโจมตี เช่น Padding Oracle Attacks หรือการเปิดเผยข้อมูลที่สำคัญผ่านข้อความแสดงข้อผิดพลาดที่ไม่เหมาะสม",
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "จัดประเภทข้อมูล ที่แอปพลิเคชันประมวลผล จัดเก็บ หรือส่งต่อ และระบุว่าข้อมูลใดเป็นข้อมูลสำคัญตามกฎหมายความเป็นส่วนตัว ข้อกำหนดทางกฎหมาย หรือความต้องการทางธุรกิจ", 
                img: "" 
            },
            { 
                sub: "หลีกเลี่ยงการจัดเก็บข้อมูลสำคัญโดยไม่จำเป็น ลบข้อมูลออกให้เร็วที่สุดหลังการใช้งาน หรือใช้วิธีที่สอดคล้องกับ PCI DSS เช่น การทำ Tokenization หรือ Truncation ข้อมูลที่ไม่จัดเก็บย่อมไม่สามารถถูกขโมยได้", 
                img: "" 
            },
            { 
                sub: "เข้ารหัสข้อมูลสำคัญที่เก็บอยู่ โดยใช้มาตรฐานที่แข็งแรงและทันสมัย", 
                img: "" 
            },
            { 
                sub: "ใช้อัลกอริทึม โปรโตคอล และคีย์ที่แข็งแรง พร้อมระบบจัดการคีย์ที่เหมาะสม", 
                img: "" 
            },
            { 
                sub: "เข้ารหัสข้อมูลระหว่างการส่งต่อ (Data in Transit) ด้วยโปรโตคอลที่ปลอดภัย เช่น TLS ที่ใช้ Forward Secrecy (FS) พร้อมลำดับความสำคัญของ Cipher จากฝั่งเซิร์ฟเวอร์ และตั้งค่าพารามิเตอร์ที่ปลอดภัย บังคับการเข้ารหัสด้วย HTTP Strict Transport Security (HSTS)", 
                img: "" 
            },
            { 
                sub: "ปิดการแคช สำหรับการตอบกลับที่มีข้อมูลสำคัญ", 
                img: "" 
            },
            { 
                sub: "ใช้การควบคุมความปลอดภัย ตามการจัดประเภทข้อมูล", 
                img: "" 
            },
            { 
                sub: "หลีกเลี่ยงการใช้โปรโตคอลที่ล้าสมัย เช่น FTP และ SMTP สำหรับการส่งข้อมูลสำคัญ", 
                img: "" 
            },
            { 
                sub: "จัดเก็บรหัสผ่านด้วยฟังก์ชันแฮชที่แข็งแรงและมีการเติมเกลือ (Salted Hashing) เช่น Argon2, scrypt, bcrypt หรือ PBKDF2 พร้อมปรับแต่งค่า Work Factor ให้เหมาะสม", 
                img: "" 
            },
            { 
                sub: "เลือก Initialization Vectors (IV) ให้เหมาะสมกับโหมดการเข้ารหัส โดยใช้ CSPRNG สำหรับโหมดที่ต้องการค่าที่ปลอดภัย หรือ Nonce สำหรับโหมดที่ไม่ต้องการสุ่มมาก แต่ทุกกรณีห้ามใช้ IV ซ้ำ", 
                img: "" 
            },
            { 
                sub: "ใช้การเข้ารหัสที่มีการยืนยันความถูกต้อง (Authenticated Encryption) แทนการเข้ารหัสแบบธรรมดา", 
                img: "" 
            },
            { 
                sub: "สร้างคีย์เข้ารหัสด้วยวิธีการที่สุ่มแบบเข้ารหัส และเก็บในรูปแบบ Byte Array หากใช้รหัสผ่าน ควรแปลงเป็นคีย์ผ่านฟังก์ชันการสร้างคีย์ที่เหมาะสม", 
                img: "" 
            },
            { 
                sub: "ใช้ฟังก์ชันสุ่มที่ปลอดภัย (Cryptographic Randomness) ในที่ที่จำเป็น และตรวจสอบว่าไม่มีการกำหนดค่าเริ่มต้น (Seeding) ที่คาดเดาได้หรือมี Entropy ต่ำ", 
                img: "" 
            },
            { 
                sub: "หลีกเลี่ยงการใช้ฟังก์ชันเข้ารหัสและ Padding Scheme ที่ล้าสมัย เช่น MD5, SHA-1 หรือ PKCS #1 v1.5", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบการตั้งค่าและการกำหนดค่าความปลอดภัยอย่างอิสระ เพื่อประเมินความมีประสิทธิภาพ", 
                img: "" 
            },

        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1:แอปพลิเคชันเข้ารหัสหมายเลขบัตรเครดิตในฐานข้อมูลโดยใช้ฟังก์ชันการเข้ารหัสอัตโนมัติของฐานข้อมูล อย่างไรก็ตาม เมื่อดึงข้อมูลกลับมา ข้อมูลจะถูกถอดรหัสโดยอัตโนมัติ หากมีช่องโหว่ SQL Injection ในระบบ ผู้โจมตีสามารถใช้ประโยชน์จากช่องโหว่นี้เพื่อดึงหมายเลขบัตรเครดิตในรูปแบบข้อความธรรมดา", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2:เว็บไซต์ไม่ได้ใช้ TLS กับทุกหน้า หรือใช้การเข้ารหัสที่อ่อนแอ ผู้โจมตีสามารถดักฟังทราฟฟิกเครือข่าย (เช่น ในเครือข่ายไร้สายที่ไม่ปลอดภัย) ลดระดับการเชื่อมต่อจาก HTTPS เป็น HTTP ดักจับคำร้อง (Request) และขโมยคุกกี้เซสชันของผู้ใช้ จากนั้นนำคุกกี้ไปใช้ซ้ำเพื่อเข้าควบคุมเซสชันของผู้ใช้ และเข้าถึงหรือเปลี่ยนแปลงข้อมูลส่วนตัว นอกจากนี้ ผู้โจมตีอาจเปลี่ยนแปลงข้อมูลที่ส่ง เช่น เปลี่ยนปลายทางการโอนเงิน", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3:ฐานข้อมูลรหัสผ่านใช้แฮชที่ไม่มีการเติมเกลือ (Unsalted Hash) หรือใช้แฮชแบบง่าย เมื่อมีช่องโหว่ในฟีเจอร์อัปโหลดไฟล์ ผู้โจมตีสามารถดาวน์โหลดฐานข้อมูลรหัสผ่านมาได้ และแฮชทั้งหมดที่ไม่มีการเติมเกลือจะถูกถอดรหัสโดยใช้ตาราง Rainbow Table ของแฮชที่คำนวณไว้ล่วงหน้า นอกจากนี้ การใช้ฟังก์ชันแฮชที่ง่ายหรือเร็ว อาจทำให้แฮชที่เติมเกลือแล้วถูกแคร็กด้วย GPU อย่างรวดเร็ว", 
                img: "" 
            }
        ]
    },
    {
        id: 3,
        title: "A03:2021 – Injection",
        description: [
            { 
                sub: "การโจมตีประเภท Injection หมายถึง การฉีดข้อมูลที่ไม่ประสงค์ดีเข้าไปในระบบหรือแอปพลิเคชัน เพื่อโจมตีหรือใช้ประโยชน์ในทางที่ไม่เหมาะสม ซึ่งอาจเป็นการฉีดโค้ดที่ไม่ประสงค์ดี เช่น SQL หรือ JavaScript ลงในระบบเพื่อทำให้ระบบเสี่ยงต่อการโจมตีหรือการทำลายข้อมูล เป้าหมายของการโจมตีประเภทนี้มักเน้นการนำเข้าข้อมูลผู ้ใช้ (user input) หรือข้อมูลจากภายนอกที่ไม่ได้รับการตรวจสอบหรือกรองให้เป็นไปตามกฎหมายก่อนใช้งานในระบบ", 
                img: "" 
            },
            { 
                sub: "แอปพลิเคชันมีความเสี่ยงต่อการโจมตีเมื่อ:", 
                img: "" 
            },
            { 
                sub: "1. ข้อมูลที่ผู้ใช้ป้อนเข้ามาไม่ได้รับการตรวจสอบ ความสะอาด (Sanitize) หรือกรองอย่างเหมาะสม", 
                img: "" 
            },
            { 
                sub: "2. ใช้คำสั่งแบบไดนามิก (Dynamic Queries) หรือคำสั่งที่ไม่ใช่พารามิเตอร์ (Non-Parameterized Calls) โดยไม่มีการหลีกเลี่ยงอักขระที่ไม่ปลอดภัยตามบริบท (Context-Aware Escaping) ก่อนส่งให้ตัวแปลคำสั่ง",
                img: "" 
            },
            { 
                sub: "3. ข้อมูลที่เป็นอันตรายถูกใช้ในพารามิเตอร์การค้นหาของ Object-Relational Mapping (ORM) เพื่อดึงข้อมูลที่สำคัญเพิ่มเติม",
                img: "" 
            },
            { 
                sub: "4. ข้อมูลที่เป็นอันตรายถูกนำไปใช้หรือรวมเข้ากับคำสั่ง SQL หรือคำสั่งอื่น ๆ โดยตรง ซึ่งคำสั่งนั้นมีทั้งโครงสร้างและข้อมูลที่เป็นอันตรายในรูปแบบของ Query ไดนามิก คำสั่ง หรือ Stored Procedure",
                img: "" 
            },
            { 
                sub: "5. การโจมตีแบบ Injection ที่พบบ่อย ได้แก่ SQL, NoSQL, OS Command, Object Relational Mapping (ORM), LDAP, และ Expression Language (EL) หรือ Object Graph Navigation Library (OGNL) ซึ่งมีหลักการเหมือนกันในทุกตัวแปลคำสั่ง การรีวิวซอร์สโค้ดเป็นวิธีที่ดีที่สุดในการตรวจจับช่องโหว่เหล่านี้ และควรทดสอบข้อมูลที่ป้อนเข้ามาทั้งหมด เช่น พารามิเตอร์, Header, URL, Cookie, JSON, SOAP, และ XML ด้วยวิธีอัตโนมัติ นอกจากนี้ องค์กรสามารถนำเครื่องมือทดสอบความปลอดภัย เช่น SAST, DAST และ IAST เข้ามาใช้ในกระบวนการ CI/CD เพื่อป้องกันไม่ให้ช่องโหว่ถูกส่งไปยังระบบจริงก่อนการใช้งาน",
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "การป้องกันการโจมตีแบบ Injection ต้องทำให้ข้อมูลแยกออกจากคำสั่งและ Query โดยสิ้นเชิง:", 
                img: "" 
            },
            { 
                sub: "ใช้ API ที่ปลอดภัย:ใช้ API ที่ไม่ต้องพึ่งตัวแปลคำสั่งโดยตรง, รองรับการใช้พารามิเตอร์ (Parameterized Interface) หรือเปลี่ยนไปใช้เครื่องมือ Object Relational Mapping (ORMs)หมายเหตุ: แม้จะใช้พารามิเตอร์ แต่ Stored Procedure อาจยังมีช่องโหว่ SQL Injection หาก PL/SQL หรือ T-SQL มีการเชื่อมคำสั่งและข้อมูลเข้าด้วยกัน หรือใช้คำสั่งที่เป็นอันตราย เช่น EXECUTE IMMEDIATE หรือ exec()", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบข้อมูลที่ป้อนเข้าด้วย Positive Validation ฝั่งเซิร์ฟเวอร์:ตรวจสอบข้อมูลที่ป้อนเข้ามาเพื่อให้มีเฉพาะข้อมูลที่ถูกต้องเท่านั้น แม้ว่าจะไม่สามารถป้องกันได้ทั้งหมด โดยเฉพาะในแอปพลิเคชันที่ต้องใช้ตัวอักษรพิเศษ เช่น ฟิลด์ข้อความหรือ API สำหรับแอปพลิเคชันมือถือ", 
                img: "" 
            },
            { 
                sub: "หลีกเลี่ยงอักขระพิเศษใน Query แบบไดนามิก:สำหรับ Query แบบไดนามิกที่เหลือ ให้ใช้วิธีการหลีกเลี่ยง (Escape) อักขระพิเศษที่เหมาะสมกับตัวแปลคำสั่งนั้น ๆหมายเหตุ: โครงสร้าง SQL เช่น ชื่อ Table หรือ Column ไม่สามารถหลีกเลี่ยงได้ ดังนั้นหากข้อมูลเหล่านี้มาจากผู้ใช้ จะถือว่าเป็นอันตราย ซึ่งเป็นปัญหาที่พบบ่อยในซอฟต์แวร์ที่สร้างรายงาน", 
                img: "" 
            },
            { 
                sub: "ใช้คำสั่ง SQL เช่น LIMIT:ใช้คำสั่งที่จำกัดการดึงข้อมูล เช่น LIMIT และการควบคุมอื่น ๆ เพื่อลดความเสียหายในกรณีที่เกิดการโจมตี SQL Injection ที่สามารถดึงข้อมูลออกมาจำนวนมาก", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1:แอปพลิเคชันใช้ข้อมูลที่ไม่ได้รับการตรวจสอบจากผู้ใช้งานในการสร้างคำสั่ง SQL ที่มีช่องโหว่ดังนี้:", 
                img: "https://65015017.gitlab.io/-/picture/-/jobs/8495694939/artifacts/public/4.png" 
            },
            { 
                sub: "เมื่อผู้โจมตีแก้ไขพารามิเตอร์ id ในเบราว์เซอร์และส่งคำสั่งที่เป็นอันตราย เช่น:", 
                img: "" 
            },
            { 
                sub: "ลิงก์ที่ใช้อาจเป็นดังนี้:", 
                img: "" 
            },
            { 
                sub: "คำสั่ง SQL นี้จะเปลี่ยนความหมายให้ดึงข้อมูลทั้งหมดในตาราง accounts ออกมา และทำให้ฐานข้อมูลหน่วงเวลา 10 วินาที", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2:แอปพลิเคชันที่พึ่งพาเฟรมเวิร์กโดยไม่มีการตรวจสอบอาจสร้าง Query ที่ยังมีช่องโหว่ เช่น Hibernate Query Language (HQL):", 
                img: "https://65015017.gitlab.io/-/picture/-/jobs/8495694939/artifacts/public/5.png" 
            },
            { 
                sub: "เมื่อผู้โจมตีส่งค่าพารามิเตอร์ id ที่เป็นอันตราย เช่นเดียวกับตัวอย่างในสถานการณ์แรก ระบบจะเปลี่ยน Query ให้ดึงข้อมูลทั้งหมดจากตาราง accounts หรืออาจมีผลที่ร้ายแรงกว่า เช่น การแก้ไขหรือการลบข้อมูล หรือการเรียกใช้ Stored Procedures", 
                img: "https://65015017.gitlab.io/-/picture/-/jobs/8495694939/artifacts/public/6.png" 
            },
        ]
    },
    {
        id: 4,
        title: "A04:2021 – Insecure Design",
        description: [
            { 
                sub: "การออกแบบที่ไม่ปลอดภัย (Insecure Design) เป็นหมวดหมู่กว้างที่แสดงถึงจุดอ่อนต่างๆ ซึ่งสามารถสรุปได้ว่า 'การออกแบบการควบคุมที่หายไปหรือไม่เพียงพอ' การออกแบบที่ไม่ปลอดภัยไม่ได้เป็นแหล่งที่มาของหมวดหมู่ความเสี่ยงอื่นๆ ใน Top 10 ของ OWASP โดยตรง มีความแตกต่างระหว่างการออกแบบที่ไม่ปลอดภัยและการนำไปใช้ที่ไม่ปลอดภัย (Insecure Implementation) ซึ่งเราจะแยกแยะระหว่างข้อบกพร่องในการออกแบบและข้อบกพร่องในการนำไปใช้ เนื่องจากมีสาเหตุและวิธีการแก้ไขที่แตกต่างกัน การออกแบบที่ปลอดภัยสามารถมีข้อบกพร่องในการนำไปใช้ที่ทำให้เกิดช่องโหว่ ซึ่งอาจถูกโจมตีได้ แต่การออกแบบที่ไม่ปลอดภัยไม่สามารถแก้ไขได้โดยการนำไปใช้ที่สมบูรณ์แบบ เพราะตามหลักการแล้ว การควบคุมด้านความปลอดภัยที่จำเป็นไม่ได้ถูกสร้างขึ้นเพื่อป้องกันการโจมตีเฉพาะที่ ในหลายกรณี การออกแบบที่ไม่ปลอดภัยเกิดจากการขาดการประเมินความเสี่ยงทางธุรกิจที่เหมาะสมในซอฟต์แวร์หรือระบบที่กำลังพัฒนา และไม่ได้กำหนดระดับความปลอดภัยที่จำเป็นในการออกแบบอย่างเหมาะสม", 
                img: "" 
            },
            
        ],
        HowtoPrevent: [
            { 
                sub: "กำหนดและใช้วงจรการพัฒนาที่ปลอดภัย:ใช้ทีมผู้เชี่ยวชาญด้านความปลอดภัยแอปพลิเคชัน (AppSec professionals) เพื่อช่วยประเมินและออกแบบการควบคุมด้านความปลอดภัยและความเป็นส่วนตัวที่เหมาะสม", 
                img: "" 
            },
            { 
                sub: "ช้รูปแบบการออกแบบที่ปลอดภัย:สร้างและใช้คลังรูปแบบการออกแบบที่ปลอดภัยหรือส่วนประกอบที่เตรียมพร้อมใช้งาน (secure design patterns) ที่สามารถนำไปใช้ได้ทันที", 
                img: "" 
            },
            { 
                sub: "ใช้การวิเคราะห์ภัยคุกคาม (Threat Modeling):ใช้การวิเคราะห์ภัยคุกคามสำหรับการตรวจสอบการตรวจสอบตัวตน, การควบคุมการเข้าถึง, ลอจิกทางธุรกิจ และกระบวนการที่สำคัญอื่นๆ ในระบบ", 
                img: "" 
            },
            { 
                sub: "บูรณาการการควบคุมด้านความปลอดภัยใน User Stories:เพิ่มการควบคุมด้านความปลอดภัยและความเป็นส่วนตัวลงในเนื้อหาของ User Stories เพื่อให้มั่นใจว่าระบบที่พัฒนามีความปลอดภัยตั้งแต่เริ่มต้น", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบความสมเหตุสมผลที่แต่ละชั้นของแอปพลิเคชัน:เพิ่มการตรวจสอบความสมเหตุสมผล (plausibility checks) ที่ทุกชั้นของแอปพลิเคชัน ตั้งแต่ส่วนหน้าไปจนถึงส่วนหลัง", 
                img: "" 
            },
            { 
                sub: "เขียน Unit และ Integration Tests:เขียนการทดสอบเพื่อยืนยันว่าแต่ละกระบวนการสำคัญในแอปพลิเคชันสามารถต้านทานภัยคุกคามที่ได้ระบุในโมเดลภัยคุกคาม รวมถึงการรวบรวม use-cases และ misuse-cases สำหรับแต่ละชั้นของแอปพลิเคชัน", 
                img: "" 
            },
            { 
                sub: "แยกชั้นของระบบในระดับเครือข่าย:แยกระบบตามชั้นต่างๆ ของเครือข่ายตามระดับการเปิดเผยข้อมูลและความต้องการในการป้องกัน", 
                img: "" 
            },
            { 
                sub: "แยกผู้ใช้ (Tenants) อย่างแข็งแกร่ง:ออกแบบให้แยกระบบผู้ใช้ในแต่ละชั้นอย่างชัดเจนและมีความปลอดภัยตลอดทุกชั้นของแอปพลิเคชัน", 
                img: "" 
            },
            { 
                sub: "จำกัดการใช้ทรัพยากร:จำกัดการใช้งานทรัพยากรของผู้ใช้หรือบริการ (resource consumption) เพื่อลดความเสี่ยงจากการใช้งานทรัพยากรที่มากเกินไป", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1: กระบวนการกู้คืนข้อมูลรับรองอาจมีการใช้ 'คำถามและคำตอบ' ซึ่งถูกห้ามตามมาตรฐาน NIST 800-63b, OWASP ASVS และ OWASP Top 10 เนื่องจากคำถามและคำตอบไม่สามารถใช้เป็นหลักฐานของตัวตนได้ เพราะอาจมีหลายคนที่รู้คำตอบ ซึ่งทำให้มันไม่ปลอดภัย จึงควรลบโค้ดดังกล่าวและแทนที่ด้วยการออกแบบที่ปลอดภัยกว่า", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: โรงภาพยนตร์แห่งหนึ่งอนุญาตให้มีส่วนลดการจองกลุ่มและมีจำนวนผู้เข้าชมสูงสุดไม่เกินสิบห้าคนก่อนที่จะต้องชำระเงินมัดจำ ผู้โจมตีอาจจำลองกระบวนการนี้และทดสอบการจองที่นั่งหกร้อยที่นั่งในโรงภาพยนตร์ทั้งหมดในไม่กี่คำขอ ซึ่งจะทำให้เกิดความสูญเสียทางรายได้มหาศาล", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3: เว็บไซต์อีคอมเมิร์ซของเครือร้านค้าปลีกไม่มีการป้องกันจากบ็อตที่ทำงานโดยผู้ค้าแผ่นกราฟิกการ์ดระดับสูง ซึ่งนำไปขายต่อในเว็บไซต์ประมูล ทำให้เกิดความเสียหายด้านภาพลักษณ์อย่างหนักกับผู้ผลิตการ์ดกราฟิกและเจ้าของร้านค้าปลีก รวมถึงสร้างความไม่พอใจแก่กลุ่มผู้ใช้ที่ไม่สามารถหาซื้อการ์ดเหล่านี้ได้ แม้ว่าจะยอมจ่ายในราคาใดๆ การออกแบบป้องกันบ็อตและกฎตรรกะทางธุรกิจ เช่น การซื้อในเวลาสั้นๆ หลังจากที่มีสินค้าให้เลือกอาจช่วยระบุการซื้อที่ไม่เป็นของจริงและปฏิเสธการทำธุรกรรมดังกล่าว", 
                img: "" 
            },
        ]
    },
    {
        id: 5,
        title: "A05:2021 – Security Misconfiguration",
        description: [
            { 
                sub: "แอปพลิเคชันอาจมีความเสี่ยงหากแอปพลิเคชันมีลักษณะดังนี้:", 
                img: "" 
            },
            { 
                sub: "ขาดการเสริมความปลอดภัยที่เหมาะสมในทุกส่วนของสแต็กแอปพลิเคชัน หรือการตั้งค่าการอนุญาตที่ไม่ถูกต้องในบริการคลาวด์", 
                img: "" 
            },
            { 
                sub: "ฟีเจอร์ที่ไม่จำเป็นเปิดใช้งานหรือติดตั้ง (เช่น พอร์ต บริการ หน้าเว็บ บัญชีผู้ใช้ หรือสิทธิ์ที่ไม่จำเป็น)",
                img: "" 
            },
            { 
                sub: "บัญชีเริ่มต้นและรหัสผ่านของบัญชีเหล่านั้นยังคงเปิดใช้งานและไม่ได้เปลี่ยนแปลง",
                img: "" 
            },
            { 
                sub: "การจัดการข้อผิดพลาดเปิดเผยข้อมูลที่ละเอียดเกินไป เช่น การแสดงสแตกเทรซหรือข้อความข้อผิดพลาดอื่นๆ ให้กับผู้ใช้",
                img: "" 
            },
            { 
                sub: "สำหรับระบบที่อัปเกรดแล้ว ฟีเจอร์ความปลอดภัยล่าสุดอาจถูกปิดใช้งานหรือไม่ได้ตั้งค่าความปลอดภัยอย่างเหมาะสม",
                img: "" 
            },
            { 
                sub: "การตั้งค่าความปลอดภัยในเซิร์ฟเวอร์แอปพลิเคชัน เฟรมเวิร์กแอปพลิเคชัน (เช่น Struts, Spring, ASP.NET) ไลบรารี ฐานข้อมูล ฯลฯ ไม่ได้ตั้งค่าเป็นค่าที่ปลอดภัย",
                img: "" 
            },
            { 
                sub: "เซิร์ฟเวอร์ไม่ได้ส่งส่วนหัวหรือคำสั่งความปลอดภัย หรือถ้าส่งแล้วก็ไม่ได้ตั้งค่าเป็นค่าที่ปลอดภัย",
                img: "" 
            },
            { 
                sub: "ซอฟต์แวร์ล้าสมัยหรือมีช่องโหว่ (ดู A06:2021-Vulnerable and Outdated Components)",
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "ควรดำเนินการติดตั้งแอปพลิเคชันอย่างปลอดภัย โดยรวมถึงการดำเนินการดังนี้:", 
                img: "" 
            },
            { 
                sub: "กระบวนการฮาร์ดเนิ่งที่สามารถทำซ้ำได้ทำให้การติดตั้งสภาพแวดล้อมใหม่ที่มีความปลอดภัยสูงเป็นเรื่องง่ายและรวดเร็ว สภาพแวดล้อมในส่วนต่างๆ เช่น การพัฒนา, QA, และการผลิตควรถูกกำหนดค่าเหมือนกัน โดยใช้ข้อมูลรับรองที่แตกต่างกันในแต่ละสภาพแวดล้อม กระบวนการนี้ควรถูกทำให้อัตโนมัติเพื่อลดความพยายามในการตั้งค่าสภาพแวดล้อมที่ปลอดภัยใหม่", 
                img: "" 
            },
            { 
                sub: "แพลตฟอร์มที่มีความจำเป็นขั้นต่ำ โดยไม่ติดตั้งฟีเจอร์, คอมโพเนนต์, เอกสาร หรือแบบอย่างที่ไม่จำเป็น ควรลบหรือไม่ติดตั้งฟีเจอร์และเฟรมเวิร์กที่ไม่ได้ใช้งาน", 
                img: "" 
            },
            { 
                sub: "กำหนดงานในการทบทวนและอัปเดตการตั้งค่าที่เหมาะสมสำหรับหมายเหตุด้านความปลอดภัย, การอัปเดต และแพตช์ในกระบวนการจัดการแพตช์ (ดู A06:2021-Vulnerable and Outdated Components) รวมถึงการทบทวนสิทธิ์การเข้าถึงในพื้นที่เก็บข้อมูลคลาวด์ (เช่น สิทธิ์การเข้าถึง S3 bucket)", 
                img: "" 
            },
            { 
                sub: "สถาปัตยกรรมแอปพลิเคชันที่แยกส่วนกันอย่างมีประสิทธิภาพเพื่อแยกแยะระหว่างคอมโพเนนต์หรือเทนแนนต์ โดยใช้การแยกส่วน, การใช้คอนเทนเนอร์, หรือกลุ่มความปลอดภัยคลาวด์ (ACLs)", 
                img: "" 
            },
            { 
                sub: "การส่งคำสั่งความปลอดภัยไปยังลูกค้า เช่น Security Headers", 
                img: "" 
            },
            { 
                sub: "กระบวนการอัตโนมัติเพื่อตรวจสอบประสิทธิภาพของการตั้งค่าและการกำหนดค่าในทุกสภาพแวดล้อม", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1: เซิร์ฟเวอร์แอปพลิเคชันมีแอปพลิเคชันตัวอย่างที่ยังไม่ได้ลบออกจากเซิร์ฟเวอร์ผลิตภัณฑ์ แอปพลิเคชันเหล่านี้มีข้อบกพร่องด้านความปลอดภัยที่รู้จักซึ่งผู้โจมตีใช้ในการแฮ็กเซิร์ฟเวอร์ หากแอปพลิเคชันหนึ่งในนั้นคือคอนโซลผู้ดูแลระบบและไม่ได้เปลี่ยนบัญชีเริ่มต้น ผู้โจมตีสามารถล็อกอินด้วยรหัสผ่านเริ่มต้นและเข้าครอบครองเซิร์ฟเวอร์ได้", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: การแสดงรายการไดเรกทอรีไม่ได้ถูกปิดใช้งานบนเซิร์ฟเวอร์ ผู้โจมตีพบว่าพวกเขาสามารถแสดงรายการไดเรกทอรีได้ง่ายๆ พวกเขาพบและดาวน์โหลดไฟล์ Java class ที่คอมไพล์แล้ว จากนั้นทำการถอดรหัสและวิศวกรรมย้อนกลับเพื่อดูโค้ด หลังจากนั้นผู้โจมตีพบช่องโหว่การควบคุมการเข้าถึงที่รุนแรงในแอปพลิเคชัน", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3: การกำหนดค่าของเซิร์ฟเวอร์แอปพลิเคชันอนุญาตให้แสดงข้อความข้อผิดพลาดที่ละเอียด เช่น สแต็กเทรซ ซึ่งอาจเผยข้อมูลที่ละเอียดอ่อนหรือข้อบกพร่องที่ซ่อนอยู่ เช่น รุ่นของคอมโพเนนต์ที่รู้ว่าอาจมีช่องโหว่", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 4: ผู้ให้บริการคลาวด์ (CSP) มีการตั้งค่าการแชร์เริ่มต้นที่เปิดให้ใช้งานอินเทอร์เน็ตจากผู้ใช้อื่นใน CSP ซึ่งทำให้ข้อมูลที่ละเอียดอ่อนที่เก็บไว้ในพื้นที่เก็บข้อมูลคลาวด์สามารถเข้าถึงได้", 
                img: "" 
            }
        ]
    },
    {
        id: 6,
        title: "A06:2021 – Vulnerable and Outdated Components",
        description: [
            { 
                sub: "แอปพลิเคชันของคุณอาจมีช่องโหว่หาก:", 
                img: "" 
            },
            { 
                sub: "คุณไม่ทราบเวอร์ชันของทุกๆ คอมโพเนนต์ที่ใช้งาน (ทั้งฝั่งไคลเอ็นต์และฝั่งเซิร์ฟเวอร์) ซึ่งรวมถึงคอมโพเนนต์ที่คุณใช้โดยตรงและการพึ่งพาที่ซ่อนอยู่", 
                img: "" 
            },
            { 
                sub: "ซอฟต์แวร์ที่ใช้มีช่องโหว่, ไม่ได้รับการสนับสนุน, หรือไม่ทันสมัย รวมถึงระบบปฏิบัติการ, เซิร์ฟเวอร์เว็บ/แอปพลิเคชัน, ระบบจัดการฐานข้อมูล (DBMS), แอปพลิเคชัน, APIs และทุกคอมโพเนนต์, สภาพแวดล้อมการทำงาน, และไลบรารี", 
                img: "" 
            },
            { 
                sub: "คุณไม่สแกนหาช่องโหว่เป็นประจำ และไม่ได้สมัครรับการแจ้งเตือนด้านความปลอดภัยที่เกี่ยวข้องกับคอมโพเนนต์ที่คุณใช้งาน", 
                img: "" 
            },
            { 
                sub: "คุณไม่อัปเกรดหรือแก้ไขแพลตฟอร์ม, เฟรมเวิร์ก, และการพึ่งพาอื่นๆ ในลักษณะที่พิจารณาความเสี่ยงและทันเวลา การทำเช่นนี้มักจะเกิดขึ้นในสภาพแวดล้อมที่การแพตช์ถูกทำในทุกๆ เดือนหรือไตรมาส ภายใต้การควบคุมการเปลี่ยนแปลง ซึ่งทำให้เปิดโอกาสให้การโจมตีที่สามารถหลีกเลี่ยงได้เกิดขึ้นได้ในหลายวันหรือหลายเดือน", 
                img: "" 
            },
            { 
                sub: "นักพัฒนาซอฟต์แวร์ไม่ได้ทดสอบความเข้ากันได้ของไลบรารีที่อัปเดต, อัปเกรด, หรือแก้ไข", 
                img: "" 
            },
            { 
                sub: "คุณไม่ได้รักษาความปลอดภัยในการตั้งค่าคอนฟิกของคอมโพเนนต์ต่างๆ ", 
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "ควรมีการจัดการกระบวนการแพตช์ (Patch Management) ดังนี้:", 
                img: "" 
            },
            { 
                sub: "ลบการพึ่งพาที่ไม่ได้ใช้งาน, ฟีเจอร์ที่ไม่จำเป็น, คอมโพเนนต์, ไฟล์, และเอกสารที่ไม่จำเป็นออก", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบและจัดทำรายการเวอร์ชันของคอมโพเนนต์ทั้งฝั่งไคลเอ็นต์และฝั่งเซิร์ฟเวอร์ (เช่น เฟรมเวิร์ก, ไลบรารี) และการพึ่งพาของมันอย่างต่อเนื่อง โดยใช้เครื่องมือเช่น versions, OWASP Dependency Check, retire.js เป็นต้น", 
                img: "" 
            },
            { 
                sub: "ติดตามช่องโหว่จากแหล่งข้อมูลต่างๆ เช่น Common Vulnerability and Exposures (CVE) และ National Vulnerability Database (NVD) สำหรับช่องโหว่ในคอมโพเนนต์ที่ใช้งาน ใช้เครื่องมือการวิเคราะห์ซอฟต์แวร์เพื่ออัตโนมัติในกระบวนการนี้", 
                img: "" 
            },
            { 
                sub: "ใช้แหล่งที่มาของคอมโพเนนต์จากแหล่งที่เชื่อถือได้เท่านั้น และใช้งานลิงก์ที่มีความปลอดภัย เช่น การใช้แพ็คเกจที่ลงลายมือชื่อเพื่อลดโอกาสที่จะแทรกแซงหรือได้รับคอมโพเนนต์ที่ถูกดัดแปลง", 
                img: "" 
            },
            { 
                sub: "เฝ้าระวังไลบรารีหรือคอมโพเนนต์ที่ไม่ได้รับการดูแลหรือไม่สร้างแพตช์ความปลอดภัยสำหรับเวอร์ชันเก่า หากไม่สามารถทำการแพตช์ได้ ควรพิจารณาติดตั้งแพตช์เสมือน (Virtual Patch) เพื่อเฝ้าระวัง, ตรวจจับ, หรือป้องกันปัญหาที่ถูกค้นพบ", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1: คอมโพเนนต์มักจะทำงานด้วยสิทธิ์เดียวกับแอปพลิเคชันเอง ดังนั้นข้อบกพร่องในคอมโพเนนต์ใด ๆ อาจส่งผลกระทบร้ายแรง ข้อบกพร่องเหล่านี้อาจเกิดจากความผิดพลาดโดยไม่ได้ตั้งใจ (เช่น ข้อผิดพลาดในการเขียนโค้ด) หรือเกิดจากการกระทำที่จงใจ (เช่น แบ็คดอร์ในคอมโพเนนต์) ตัวอย่างช่องโหว่ที่สามารถถูกโจมตีได้ ได้แก่:", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: CVE-2017-5638: ช่องโหว่ในการทำงานของ Struts 2 ที่ทำให้สามารถเรียกใช้คำสั่งจากระยะไกลบนเซิร์ฟเวอร์ได้ ซึ่งเป็นสาเหตุให้เกิดการละเมิดข้อมูลสำคัญ", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3: ในกรณีของ Internet of Things (IoT): อุปกรณ์บางอย่าง เช่น อุปกรณ์ทางการแพทย์ (Biomedical Devices) มักยากหรือเป็นไปไม่ได้ที่จะทำการแพตช์ (Patch) แต่ความสำคัญของการทำแพตช์นั้นสูงมาก", 
                img: "" 
            },
            
        ]
    },
    {
        id: 7,
        title: "A07:2021 – Identification and Authentication Failures",
        description: [
            { 
                sub: "การยืนยันตัวตนของผู้ใช้ การตรวจสอบตัวตน และการจัดการเซสชันเป็นสิ่งสำคัญในการปกป้องการโจมตีที่เกี่ยวข้องกับการยืนยันตัวตน หากแอปพลิเคชัน:", 
                img: "" 
            },
            { 
                sub: "อนุญาตให้มีการโจมตีอัตโนมัติ เช่น credential stuffing ซึ่งผู้โจมตีมีรายชื่อของชื่อผู้ใช้และรหัสผ่านที่ถูกต้อง", 
                img: "" 
            },
            { 
                sub: "อนุญาตให้มีการโจมตีด้วย brute force หรือการโจมตีอัตโนมัติประเภทอื่น ๆ", 
                img: "" 
            },
            { 
                sub: "อนุญาตให้ใช้รหัสผ่านที่มีความอ่อนแอหรือเป็นที่รู้จักกันดี เช่น 'Password1' หรือ 'admin/admin'", 
                img: "" 
            },
            { 
                sub: "ใช้กระบวนการกู้คืนรหัสผ่านหรือฟังก์ชัน 'ลืมรหัสผ่าน' ที่อ่อนแอและไม่มีประสิทธิภาพ เช่น การใช้ คำถามและคำตอบ ที่ไม่สามารถทำให้ปลอดภัยได้", 
                img: "" 
            },
            { 
                sub: "ใช้รหัสผ่านที่เก็บในรูปแบบ ข้อความธรรมดา หรือรหัสผ่านที่เข้ารหัสหรือแฮชด้วยวิธีที่อ่อนแอ (ดู A02:2021-Cryptographic Failures)", 
                img: "" 
            },
            { 
                sub: "ไม่มี การยืนยันตัวตนแบบหลายขั้นตอน (MFA) หรือมีความไม่ปลอดภัยในการใช้งาน", 
                img: "" 
            },
            { 
                sub: "เปิดเผย ตัวระบุเซสชัน (Session ID) ใน URL", 
                img: "" 
            },
            { 
                sub: "ใช้ตัวระบุเซสชันเดิมหลังจากที่ผู้ใช้ล็อกอินสำเร็จ", 
                img: "" 
            },
            { 
                sub: "ไม่มีการ ยกเลิกตัวระบุเซสชัน อย่างถูกต้อง เช่น การยกเลิกเมื่อผู้ใช้ทำการออกจากระบบ หรือเมื่อมีช่วงเวลาที่ไม่มีการใช้งาน", 
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "หากเป็นไปได้, ใช้การยืนยันตัวตนหลายขั้นตอน (Multi-factor authentication - MFA) เพื่อป้องกันการโจมตีอัตโนมัติ เช่น credential stuffing, brute force, และการใช้ข้อมูลรับรองที่ถูกขโมย", 
                img: "" 
            },
            { 
                sub: "ไม่ใช้รหัสผ่านเริ่มต้น หรือ ข้อมูลรับรองเริ่มต้น โดยเฉพาะสำหรับผู้ใช้แอดมิน และอย่าลืมเปลี่ยนรหัสผ่านเริ่มต้นก่อนการใช้งานจริง", 
                img: "" 
            },
            { 
                sub: "ใช้การตรวจสอบรหัสผ่านที่อ่อนแอ เช่น การตรวจสอบรหัสผ่านใหม่หรือที่เปลี่ยนแล้วกับ รายการรหัสผ่านที่แย่ที่สุด 10,000 รายการ เพื่อป้องกันการใช้งานรหัสผ่านที่ไม่ปลอดภัย", 
                img: "" 
            },
            { 
                sub: "ทำให้ ความยาว ความซับซ้อน และการหมุนเวียนรหัสผ่าน สอดคล้องกับคำแนะนำใน NIST 800-63b ส่วน 5.1.1 สำหรับ Memorized Secrets หรือ นโยบายรหัสผ่านที่ใช้หลักฐานจากงานวิจัยล่าสุด", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบให้แน่ใจว่าเส้นทางการลงทะเบียน, การกู้คืนข้อมูลรับรอง, และ API ได้รับการป้องกันจากการโจมตีแบบ account enumeration โดยการใช้ข้อความเดียวกันสำหรับผลลัพธ์ทั้งหมด", 
                img: "" 
            },
            { 
                sub: "จำกัดหรือชะลอการพยายามเข้าสู่ระบบที่ล้มเหลว โดยระวังไม่ให้เกิด การโจมตีแบบปฏิเสธการให้บริการ (DoS) บันทึกการพยายามล้มเหลวทั้งหมดและแจ้งเตือนผู้ดูแลระบบเมื่อมีการตรวจพบการโจมตีเช่น credential stuffing หรือ brute force", 
                img: "" 
            },
            { 
                sub: "ใช้ เซสชันแมเนเจอร์ที่ปลอดภัยจากฝั่งเซิร์ฟเวอร์ ที่สร้าง Session ID ใหม่แบบสุ่ม และมี ความหลากหลายสูง หลังจากผู้ใช้ล็อกอิน การระบุตัวตนของเซสชันไม่ควรอยู่ใน URL, ควรเก็บอย่างปลอดภัย, และต้องยกเลิกหลังจากการออกจากระบบ, การหมดเวลานิ่ง, และการหมดอายุของเซสชัน", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1: Credential stuffing เป็นการใช้รายการรหัสผ่านที่รู้จักในการโจมตีแบบอัตโนมัติ หากแอปพลิเคชันไม่ป้องกันการโจมตีนี้ แอปพลิเคชันอาจถูกใช้เป็นเครื่องมือในการตรวจสอบว่าข้อมูลรับรอง (credentials) ที่ให้มาถูกต้องหรือไม่", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: การโจมตีการยืนยันตัวตนส่วนใหญ่เกิดจากการใช้รหัสผ่านเป็นเพียงตัวแปรเดียวในการยืนยันตัวตน เมื่อก่อนการหมุนเวียนรหัสผ่านและการตั้งรหัสผ่านที่ซับซ้อนถือเป็นแนวทางที่ดีที่สุด แต่ปัจจุบันการใช้ การยืนยันตัวตนหลายขั้นตอน (MFA) แทนการใช้รหัสผ่านเพียงตัวเดียวถือเป็นแนวทางที่ปลอดภัยกว่า ตาม NIST 800-63", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3: Session timeouts ที่ไม่ได้ตั้งค่าอย่างถูกต้อง หากผู้ใช้เข้าถึงแอปพลิเคชันจากคอมพิวเตอร์สาธารณะและไม่ได้เลือก 'ออกจากระบบ' (logout) แต่เพียงแค่ปิดแท็บเบราว์เซอร์แล้วเดินจากไป หลังจากหนึ่งชั่วโมงผู้โจมตีอาจใช้เบราว์เซอร์เดิมและยังคงเข้าสู่ระบบได้เพราะการยืนยันตัวตนของผู้ใช้ยังไม่หมดอายุ", 
                img: "" 
            },
            
        ]
    },
    {
        id: 8,
        title: "A08:2021 – Software and Data Integrity Failures",
        description: [
            { 
                sub: "ความล้มเหลวของความสมบูรณ์ของซอฟต์แวร์และข้อมูล เกี่ยวข้องกับโค้ดและโครงสร้างพื้นฐานที่ไม่ปกป้องจากการละเมิดความสมบูรณ์ของข้อมูล ตัวอย่างเช่น การที่แอปพลิเคชันพึ่งพาปลั๊กอิน ไลบรารี หรือโมดูลจากแหล่งที่ไม่เชื่อถือ เช่น รีโพซิทอรีหรือเครือข่ายการจัดส่งเนื้อหา (CDN) หรือกระบวนการ CI/CD ที่ไม่ปลอดภัยสามารถทำให้เกิดการเข้าถึงที่ไม่ได้รับอนุญาต โค้ดที่เป็นอันตราย หรือการบุกรุกระบบ นอกจากนี้ แอปพลิเคชันหลายตัวในปัจจุบันมีฟังก์ชันการอัปเดตอัตโนมัติที่ดาวน์โหลดการอัปเดตโดยไม่มีการตรวจสอบความสมบูรณ์ที่เพียงพอและนำไปใช้กับแอปพลิเคชันที่เคยเชื่อถือได้ ผู้โจมตีอาจอัปโหลดการอัปเดตของตนเองเพื่อแจกจ่ายและรันในทุกการติดตั้ง ตัวอย่างอื่นคือการที่วัตถุหรือข้อมูลถูกเข้ารหัสหรืออนุกรม (serialized) ลงในโครงสร้างที่ผู้โจมตีสามารถเห็นและแก้ไขได้ ซึ่งทำให้เกิดช่องโหว่จาก การอนุกรมข้อมูลที่ไม่ปลอดภัย (Insecure Deserialization)", 
                img: "" 
            },
            
            
        ],
        HowtoPrevent: [
            { 
                sub: "ใช้ลายเซ็นดิจิทัล หรือกลไกที่คล้ายกันเพื่อตรวจสอบว่า ซอฟต์แวร์หรือข้อมูลมาจากแหล่งที่คาดหวังและไม่ได้ถูกเปลี่ยนแปลง", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบให้แน่ใจว่า ไลบรารีและการพึ่งพาต่าง ๆ เช่น npm หรือ Maven ใช้รีโพซิทอรีที่เชื่อถือได้ หากคุณมีโปรไฟล์ความเสี่ยงสูง ควรพิจารณาการโฮสต์รีโพซิทอรีภายในที่ได้รับการตรวจสอบ", 
                img: "" 
            },
            { 
                sub: "ใช้เครื่องมือรักษาความปลอดภัยในซอฟต์แวร์ซัพพลายเชน เช่น OWASP Dependency Check หรือ OWASP CycloneDX เพื่อตรวจสอบว่า คอมโพเนนต์ต่าง ๆ ไม่มีช่องโหว่ที่รู้จัก", 
                img: "" 
            },
            { 
                sub: "มีการทบทวนกระบวนการ สำหรับการเปลี่ยนแปลงโค้ดและการตั้งค่า เพื่อลดโอกาสที่โค้ดหรือการตั้งค่าที่เป็นอันตรายจะถูกแนะนำเข้าสู่กระบวนการซอฟต์แวร์ของคุณ", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบให้แน่ใจว่ากระบวนการ CI/CD มีการแยกส่วนที่เหมาะสม การตั้งค่า และการควบคุมการเข้าถึงเพื่อรับประกันความสมบูรณ์ของโค้ดที่ไหลผ่านกระบวนการสร้างและการปรับใช้", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบว่า ข้อมูลที่อนุกรม (Serialized Data) ที่ไม่ได้ลงลายเซ็นหรือไม่ได้เข้ารหัสไม่ถูกส่งไปยังลูกค้าที่ไม่เชื่อถือ โดยไม่มีการตรวจสอบความสมบูรณ์หรือการลงลายเซ็นดิจิทัลเพื่อป้องกันการแก้ไขหรือการเล่นข้อมูลซ้ำ", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1: การอัปเดตโดยไม่มีการเซ็นต์หลาย ๆ อุปกรณ์ เช่น เราเตอร์บ้าน, กล่อง set-top, และเฟิร์มแวร์ของอุปกรณ์อื่น ๆ ไม่ได้ตรวจสอบการอัปเดตผ่านเฟิร์มแวร์ที่เซ็นต์แล้ว ซึ่งเฟิร์มแวร์ที่ไม่มีการเซ็นต์นี้เป็นเป้าหมายที่เติบโตขึ้นสำหรับผู้โจมตี และเป็นความกังวลใหญ่ เพราะในหลายกรณีไม่มีวิธีการแก้ไขอื่นนอกจากต้องรอให้อุปกรณ์ที่มีปัญหาถูกแทนที่ในเวอร์ชันถัดไป", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: การโจมตีการอัปเดต SolarWindsรัฐชาติได้โจมตีกลไกการอัปเดต โดยมีกรณีที่สำคัญคือการโจมตี SolarWinds Orion บริษัทที่พัฒนาโปรแกรมนี้มีการสร้างและกระบวนการรักษาความสมบูรณ์ของการอัปเดตที่ปลอดภัย แต่กระบวนการเหล่านี้ถูกบิดเบือน และในช่วงหลายเดือน บริษัทได้แจกจ่ายการอัปเดตที่เป็นอันตรายให้กับองค์กรกว่า 18,000 แห่ง ซึ่งมีผลกระทบถึงประมาณ 100 แห่ง การโจมตีนี้เป็นหนึ่งในการละเมิดที่กว้างขวางและสำคัญที่สุดในประวัติศาสตร์", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3: การอนุกรมข้อมูลที่ไม่ปลอดภัย (Insecure Deserialization)แอปพลิเคชัน React ใช้บริการไมโครเซอร์วิส Spring Boot และพยายามทำให้โค้ดของพวกเขามีความไม่เปลี่ยนแปลง (immutable) โดยวิธีการที่พวกเขาคิดออกคือการอนุกรมสถานะของผู้ใช้และส่งข้อมูลนี้กลับและไปมาในแต่ละคำขอ ผู้โจมตีสังเกตเห็นลายเซ็นวัตถุ 'rO0' (ในรูปแบบ base64) และใช้เครื่องมือ Java Serial Killer เพื่อทำให้โค้ดทำงานจากระยะไกลบนเซิร์ฟเวอร์แอปพลิเคชัน", 
                img: "" 
            },
            
        ]
    },
    {
        id: 9,
        title: "A09:2021 – Security Logging and Monitoring Failures",
        description: [
            { 
                sub: "การบันทึกและตรวจสอบเป็นสิ่งสำคัญในการตรวจจับและตอบสนองต่อการโจมตีที่เกิดขึ้น หากไม่มีการบันทึกและตรวจสอบเหตุการณ์ จึงไม่สามารถตรวจพบการละเมิดระบบได้ ตัวอย่างของกรณีที่ระบบมีการบันทึกและตรวจสอบไม่เพียงพอ ได้แก่:", 
                img: "" 
            },
            { 
                sub: "เหตุการณ์ที่สามารถตรวจสอบได้ เช่น การเข้าสู่ระบบ, การเข้าสู่ระบบผิดพลาด, และการทำธุรกรรมที่มีมูลค่าสูงไม่ได้รับการบันทึกหากไม่มีการบันทึกเหตุการณ์สำคัญเหล่านี้ จะไม่สามารถตรวจสอบการกระทำที่น่าสงสัยหรือการโจมตีที่เกิดขึ้นได้", 
                img: "" 
            },
            { 
                sub: "การแสดงคำเตือนและข้อผิดพลาดไม่มีข้อความบันทึกที่ชัดเจนหรือไม่เพียงพอหากเกิดข้อผิดพลาดในระบบและไม่มีข้อความบันทึกที่มีประโยชน์หรือชัดเจน มันจะยากในการระบุสาเหตุของปัญหาหรือการโจมตีที่เกิดขึ้น", 
                img: "" 
            },
            { 
                sub: "ไม่มีการตรวจสอบบันทึกของแอปพลิเคชันและ API สำหรับกิจกรรมที่น่าสงสัยหากบันทึกเหตุการณ์ไม่ได้รับการตรวจสอบอย่างสม่ำเสมอ อาจจะทำให้กิจกรรมที่ผิดปกติหรือละเมิดความปลอดภัยไม่ถูกตรวจจับในเวลาที่เหมาะสม", 
                img: "" 
            },
            { 
                sub: "บันทึกเหตุการณ์ถูกเก็บไว้แค่ในเครื่องเดียวหรือเก็บข้อมูลในที่ที่ไม่ปลอดภัยการเก็บบันทึกแค่ในเครื่องเดียวอาจทำให้ผู้โจมตีสามารถลบหรือลบข้อมูลที่สำคัญได้ ทำให้ไม่สามารถตรวจสอบเหตุการณ์ย้อนหลังได้", 
                img: "" 
            },
            { 
                sub: "ไม่มีเกณฑ์การแจ้งเตือนที่เหมาะสมและกระบวนการที่มีประสิทธิภาพในการตอบสนองหากไม่มีเกณฑ์การแจ้งเตือนที่เหมาะสมหรือการตอบสนองเมื่อเกิดการโจมตี จะทำให้การตอบสนองต่อเหตุการณ์ล่าช้าและเพิ่มความเสี่ยง", 
                img: "" 
            },
            { 
                sub: "การทดสอบการเจาะระบบ (Penetration Testing) และการทดสอบแอปพลิเคชันโดยเครื่องมือการทดสอบความปลอดภัยแบบไดนามิก (DAST) เช่น OWASP ZAP ไม่ทำให้เกิดการแจ้งเตือนการทดสอบความปลอดภัยควรทำให้เกิดการแจ้งเตือนทันทีเมื่อพบช่องโหว่หรือการละเมิดใด ๆ ในระบบ", 
                img: "" 
            },
            { 
                sub: "แอปพลิเคชันไม่สามารถตรวจจับ, แจ้งเตือน, หรือเพิ่มระดับการตอบสนองต่อการโจมตีที่เกิดขึ้นได้แบบเรียลไทม์หรือใกล้เคียงเรียลไทม์การตรวจจับการโจมตีที่เกิดขึ้นในเวลาจริงเป็นสิ่งสำคัญเพื่อป้องกันไม่ให้การโจมตีดำเนินไปและลดผลกระทบที่เกิดขึ้น", 
                img: "" 
            },
        ],
        HowtoPrevent: [
            { 
                sub: "บันทึกข้อผิดพลาดการเข้าสู่ระบบ การควบคุมการเข้าถึง และการตรวจสอบข้อมูลฝั่งเซิร์ฟเวอร์", 
                img: "" 
            },
            { 
                sub: "ควรบันทึกการเข้าสู่ระบบที่ล้มเหลว, การควบคุมการเข้าถึงที่ล้มเหลว และการตรวจสอบข้อมูลที่ไม่ถูกต้องจากฝั่งเซิร์ฟเวอร์ โดยให้ข้อมูลบริบทที่เพียงพอ เช่น ข้อมูลผู้ใช้, ที่อยู่ IP, ข้อมูลคำขอ และข้อมูลที่สามารถช่วยในการระบุบัญชีผู้ใช้ที่น่าสงสัยหรือละเมิดได้", 
                img: "" 
            },
            { 
                sub: "ควรเก็บบันทึกไว้อย่างเพียงพอเพื่อให้สามารถวิเคราะห์ย้อนกลับได้ในภายหลังสำหรับการวิเคราะห์ทางนิติวิทยาศาสตร์", 
                img: "" 
            },
            { 
                sub: "รูปแบบการบันทึกที่สามารถใช้งานได้ง่ายกับระบบจัดการบันทึก", 
                img: "" 
            },
            { 
                sub: "การบันทึกควรอยู่ในรูปแบบที่ระบบจัดการบันทึกสามารถอ่านและประมวลผลได้อย่างง่ายดาย เช่น การใช้รูปแบบมาตรฐานที่รองรับการบันทึกและการวิเคราะห์ในระยะยาว", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบให้แน่ใจว่าข้อมูลในบันทึกถูกเข้ารหัสอย่างถูกต้องเพื่อป้องกันการโจมตีจากการแทรกแซงในระบบบันทึกและการตรวจสอบ เช่น การป้องกันการแทรกข้อมูลอันตราย", 
                img: "" 
            },
            { 
                sub: "การตรวจสอบธุรกรรมที่มีมูลค่าสูง", 
                img: "" 
            },
            { 
                sub: "ธุรกรรมที่มีมูลค่าสูง เช่น การทำธุรกรรมทางการเงิน หรือการเปลี่ยนแปลงข้อมูลสำคัญ ควรมีเส้นทางการตรวจสอบที่ไม่สามารถเปลี่ยนแปลงได้และมีการควบคุมความสมบูรณ์ เช่น การใช้ตารางฐานข้อมูลที่เพิ่มข้อมูลเท่านั้น (append-only) เพื่อป้องกันการลบหรือแก้ไขข้อมูล", 
                img: "" 
            },
            { 
                sub: "ควรตรวจสอบและบันทึกข้อมูลการทำธุรกรรมอย่างต่อเนื่องเพื่อป้องกันการเปลี่ยนแปลงที่ไม่ได้รับอนุญาต", 
                img: "" 
            },
            { 
                sub: "การตรวจสอบและแจ้งเตือนที่มีประสิทธิภาพ", 
                img: "" 
            },
            { 
                sub: "ทีม DevSecOps ควรตั้งระบบตรวจสอบและแจ้งเตือนที่มีประสิทธิภาพ โดยที่ระบบสามารถตรวจจับกิจกรรมที่น่าสงสัยได้ในเวลาใกล้เคียงกับเวลาจริง และสามารถตอบสนองต่อกิจกรรมที่ไม่ปกติได้ทันที", 
                img: "" 
            },
            { 
                sub: "ควรใช้เกณฑ์การแจ้งเตือนที่ตั้งไว้เพื่อให้มีการตอบสนองได้อย่างรวดเร็วและมีประสิทธิภาพ", 
                img: "" 
            },
            { 
                sub: "แผนการตอบสนองและการฟื้นฟูเหตุการณ์", 
                img: "" 
            },
            { 
                sub: "ควรมีแผนการตอบสนองและการฟื้นฟูเหตุการณ์ที่ระบุขั้นตอนในการตรวจจับและตอบสนองต่อเหตุการณ์ด้านความปลอดภัย โดยสามารถนำกรอบการทำงานจากมาตรฐาน NIST 800-61r2 หรือเวอร์ชันล่าสุดมาใช้เพื่อช่วยจัดการเหตุการณ์ได้อย่างเหมาะสม", 
                img: "" 
            },
            { 
                sub: "ควรฝึกฝนและอัปเดตแผนนี้อย่างสม่ำเสมอเพื่อให้ทีมรักษาความปลอดภัยสามารถรับมือกับเหตุการณ์ได้อย่างมีประสิทธิภาพ", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "สถานการณ์ที่ 1: การละเมิดข้อมูลในเว็บไซต์ของผู้ให้บริการแผนสุขภาพสำหรับเด็ก ผู้ดำเนินการเว็บไซต์ของผู้ให้บริการแผนสุขภาพสำหรับเด็กไม่สามารถตรวจจับการละเมิดข้อมูลได้เนื่องจากขาดการตรวจสอบและการบันทึกข้อมูล (Logging & Monitoring) เมื่อผู้โจมตีสามารถเข้าถึงและแก้ไขบันทึกข้อมูลสุขภาพที่ละเอียดอ่อนของเด็กมากกว่า 3.5 ล้านคน การตรวจสอบเหตุการณ์หลังจากเกิดเหตุการณ์พบว่า นักพัฒนาเว็บไซต์ไม่ได้แก้ไขช่องโหว่ที่สำคัญ และเนื่องจากไม่มีการบันทึกหรือการตรวจสอบระบบ การละเมิดข้อมูลนี้อาจจะเกิดขึ้นตั้งแต่ปี 2013 ซึ่งเป็นระยะเวลากว่า 7 ปี", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: การละเมิดข้อมูลของสายการบินใหญ่ในอินเดีย สายการบินรายใหญ่ของอินเดียเกิดการละเมิดข้อมูลที่เกี่ยวข้องกับข้อมูลส่วนบุคคลของผู้โดยสารหลายล้านคนเป็นเวลามากกว่า 10 ปี ข้อมูลที่ถูกละเมิดรวมถึงข้อมูลพาสปอร์ตและข้อมูลบัตรเครดิต การละเมิดนี้เกิดขึ้นที่ผู้ให้บริการคลาวด์ภายนอกที่บริษัทใช้บริการ โดยสายการบินได้รับการแจ้งเตือนจากผู้ให้บริการคลาวด์หลังจากเหตุการณ์เกิดขึ้นแล้ว", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3: การละเมิดข้อมูลของสายการบินใหญ่ในยุโรป สายการบินใหญ่ในยุโรปเกิดการละเมิดข้อมูลที่ต้องรายงานภายใต้กฎระเบียบ GDPR (General Data Protection Regulation) การละเมิดข้อมูลนี้เกิดจากช่องโหว่ในระบบการชำระเงินที่ถูกโจมตีโดยผู้โจมตี ทำให้ข้อมูลการชำระเงินของลูกค้ามากกว่า 400,000 รายถูกเก็บรวบรวมไว้ ภายหลังจากเหตุการณ์นี้ สายการบินถูกปรับค่าปรับเป็นจำนวน 20 ล้านปอนด์จากหน่วยงานควบคุมข้อมูลส่วนบุคคล", 
                img: "" 
            },
            
            
            
        ]
    },
    {
        id: 10,
        title: "A10:2021 – Server-Side Request Forgery (SSRF)",
        description: [
            { 
                sub: "ข้อบกพร่องของ SSRF เกิดขึ้นเมื่อเว็บแอปพลิเคชันทำการดึงข้อมูลจากแหล่งทรัพยากรภายนอกโดยไม่ตรวจสอบ URL ที่ผู้ใช้ระบุ ซึ่งทำให้ผู้โจมตีสามารถบังคับให้แอปพลิเคชันส่งคำขอไปยังปลายทางที่ไม่คาดคิด แม้ว่าจะมีการป้องกันจากไฟร์วอลล์, VPN หรือการควบคุมการเข้าถึงเครือข่ายประเภทอื่นๆ (ACL) ก็ตาม", 
                img: "" 
            },
            
        ],
        HowtoPrevent: [
            { 
                sub: "นักพัฒนาสามารถป้องกัน SSRF ได้โดยการใช้การควบคุมที่มีหลายชั้นในระดับต่างๆ ดังนี้:", 
                img: "" 
            },
            { 
                sub: "จากชั้นเครือข่าย:", 
                img: "" 
            },
            { 
                sub: "แยกฟังก์ชันการเข้าถึงแหล่งข้อมูลจากภายนอกในเครือข่ายที่แยกต่างหาก: ลดผลกระทบจากการโจมตี SSRF โดยแยกการเข้าถึงทรัพยากรภายนอกจากระบบที่สำคัญ", 
                img: "" 
            },
            { 
                sub: "บังคับใช้กฎไฟร์วอลล์ 'deny by default': บล็อกการเข้าถึงเครือข่ายภายในทั้งหมด ยกเว้นการเข้าถึงที่จำเป็น", 
                img: "" 
            },
            { 
                sub: "จากชั้นแอปพลิเคชัน:", 
                img: "" 
            },
            { 
                sub: "ตรวจสอบและกรองข้อมูลที่ได้รับจากผู้ใช้: ทำความสะอาดและตรวจสอบข้อมูล URL ที่ผู้ใช้ป้อนเข้ามา", 
                img: "" 
            },
            { 
                sub: "บังคับใช้การอนุญาตโดยใช้รายการอนุญาต (positive allow list): กำหนด URL schema, port และปลายทางที่อนุญาตเท่านั้น", 
                img: "" 
            },
            { 
                sub: "อย่าส่งคำตอบดิบให้กับผู้ใช้: ป้องกันไม่ให้ผู้โจมตีสามารถเข้าถึงข้อมูลที่ไม่ต้องการ", 
                img: "" 
            },
            { 
                sub: "ปิดการใช้งานการเปลี่ยนเส้นทาง HTTP: ป้องกันไม่ให้มีการเปลี่ยนเส้นทางไปยังปลายทางที่ไม่คาดคิด", 
                img: "" 
            },
            { 
                sub: "ระมัดระวังเกี่ยวกับความสอดคล้องของ URL: เพื่อหลีกเลี่ยงการโจมตี เช่น DNS rebinding และการโจมตี 'time of check, time of use' (TOCTOU)", 
                img: "" 
            },
            { 
                sub: "หลีกเลี่ยงการใช้รายการปฏิเสธ (deny list) หรือ regular expression เพื่อป้องกัน SSRF: ผู้โจมตีมีเครื่องมือและสกิลในการข้ามรายการปฏิเสธได้", 
                img: "" 
            },
            { 
                sub: "มาตรการเพิ่มเติมที่ควรพิจารณา:", 
                img: "" 
            },
            { 
                sub: "หลีกเลี่ยงการติดตั้งบริการที่เกี่ยวข้องกับความปลอดภัยในระบบหน้าเว็บ (เช่น OpenID): ควบคุมการจราจรภายในระบบเหล่านี้ (เช่น localhost)", 
                img: "" 
            },
            { 
                sub: "ใช้การเข้ารหัสเครือข่าย (เช่น VPN): สำหรับระบบหน้าเว็บที่มีผู้ใช้กลุ่มเฉพาะและสามารถจัดการได้ เพื่อพิจารณาความต้องการการป้องกันที่สูงมาก", 
                img: "" 
            },
        ],
        ExampleAttackScenarios: [
            { 
                sub: "ผู้โจมตีสามารถใช้ SSRF เพื่อโจมตีระบบที่ได้รับการปกป้องโดยไฟร์วอลล์แอปพลิเคชันเว็บ, ไฟร์วอลล์, หรือ ACL ของเครือข่าย ผ่านสถานการณ์ต่างๆ ดังนี้:", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 1: การสแกนพอร์ตของเซิร์ฟเวอร์ภายในหากสถาปัตยกรรมเครือข่ายไม่ได้แยกส่วนอย่างชัดเจน ผู้โจมตีสามารถทำแผนที่เครือข่ายภายในและตรวจสอบว่าเซิร์ฟเวอร์ภายในเปิดหรือปิดพอร์ตใด โดยใช้ผลการเชื่อมต่อหรือเวลาที่ใช้ในการเชื่อมต่อหรือปฏิเสธการเชื่อมต่อที่เกิดจากการส่ง payload SSRF", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 2: การเปิดเผยข้อมูลที่สำคัญผู้โจมตีสามารถเข้าถึงไฟล์ภายในหรือบริการภายในเพื่อดึงข้อมูลที่สำคัญ เช่น การเข้าถึงไฟล์ file:///etc/passwd หรือบริการใน http://localhost:28017/", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 3: การเข้าถึงข้อมูลเมตาของบริการคลาวด์ผู้โจมตีสามารถเข้าถึงข้อมูลเมตาของบริการคลาวด์ที่ตั้งค่าไว้ เช่น URL http://169.254.169.254/ ที่เป็นที่เก็บข้อมูลเมตาของบริการคลาวด์ ซึ่งอาจช่วยให้ผู้โจมตีได้รับข้อมูลที่สำคัญและความลับต่างๆ", 
                img: "" 
            },
            { 
                sub: "สถานการณ์ที่ 4: การโจมตีบริการภายในผู้โจมตีสามารถใช้ประโยชน์จากบริการภายในเพื่อดำเนินการโจมตีเพิ่มเติม เช่น การโจมตีด้วย Remote Code Execution (RCE) หรือการโจมตีแบบ Denial of Service (DoS) ผ่านบริการภายใน", 
                img: "" 
            },
        ]
    },
];

// getAll API
const getAll = (req, res) => {
    return res.status(200).json({
        topic_detail: data
    });
};

// getById API
const getById = (req, res) => {
    const { id } = req.params;
    const topic = data.find(item => item.id === parseInt(id));

    if (!topic) {
        return res.status(404).json({ message: "Topic not found" });
    }

    return res.status(200).json({
        topic_detail: [topic] // ห่อ object ด้วย array
    });
};

module.exports = {
    getAll,
    getById
};
